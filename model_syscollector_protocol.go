/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SyscollectorProtocol type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyscollectorProtocol{}

// SyscollectorProtocol struct for SyscollectorProtocol
type SyscollectorProtocol struct {
	Dhcp *DHCPStatus `json:"dhcp,omitempty"`
	// Gateway IP
	Gateway *string `json:"gateway,omitempty"`
	// Network interface name
	Iface *string `json:"iface,omitempty"`
	// Scan ID
	ScanId *int64 `json:"scan_id,omitempty"`
	// Protocol of the interface data
	Type *string `json:"type,omitempty"`
	// Agent ID
	AgentId *string `json:"agent_id,omitempty"`
}

// NewSyscollectorProtocol instantiates a new SyscollectorProtocol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyscollectorProtocol() *SyscollectorProtocol {
	this := SyscollectorProtocol{}
	return &this
}

// NewSyscollectorProtocolWithDefaults instantiates a new SyscollectorProtocol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyscollectorProtocolWithDefaults() *SyscollectorProtocol {
	this := SyscollectorProtocol{}
	return &this
}

// GetDhcp returns the Dhcp field value if set, zero value otherwise.
func (o *SyscollectorProtocol) GetDhcp() DHCPStatus {
	if o == nil || IsNil(o.Dhcp) {
		var ret DHCPStatus
		return ret
	}
	return *o.Dhcp
}

// GetDhcpOk returns a tuple with the Dhcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyscollectorProtocol) GetDhcpOk() (*DHCPStatus, bool) {
	if o == nil || IsNil(o.Dhcp) {
		return nil, false
	}
	return o.Dhcp, true
}

// HasDhcp returns a boolean if a field has been set.
func (o *SyscollectorProtocol) HasDhcp() bool {
	if o != nil && !IsNil(o.Dhcp) {
		return true
	}

	return false
}

// SetDhcp gets a reference to the given DHCPStatus and assigns it to the Dhcp field.
func (o *SyscollectorProtocol) SetDhcp(v DHCPStatus) {
	o.Dhcp = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *SyscollectorProtocol) GetGateway() string {
	if o == nil || IsNil(o.Gateway) {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyscollectorProtocol) GetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *SyscollectorProtocol) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *SyscollectorProtocol) SetGateway(v string) {
	o.Gateway = &v
}

// GetIface returns the Iface field value if set, zero value otherwise.
func (o *SyscollectorProtocol) GetIface() string {
	if o == nil || IsNil(o.Iface) {
		var ret string
		return ret
	}
	return *o.Iface
}

// GetIfaceOk returns a tuple with the Iface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyscollectorProtocol) GetIfaceOk() (*string, bool) {
	if o == nil || IsNil(o.Iface) {
		return nil, false
	}
	return o.Iface, true
}

// HasIface returns a boolean if a field has been set.
func (o *SyscollectorProtocol) HasIface() bool {
	if o != nil && !IsNil(o.Iface) {
		return true
	}

	return false
}

// SetIface gets a reference to the given string and assigns it to the Iface field.
func (o *SyscollectorProtocol) SetIface(v string) {
	o.Iface = &v
}

// GetScanId returns the ScanId field value if set, zero value otherwise.
func (o *SyscollectorProtocol) GetScanId() int64 {
	if o == nil || IsNil(o.ScanId) {
		var ret int64
		return ret
	}
	return *o.ScanId
}

// GetScanIdOk returns a tuple with the ScanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyscollectorProtocol) GetScanIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ScanId) {
		return nil, false
	}
	return o.ScanId, true
}

// HasScanId returns a boolean if a field has been set.
func (o *SyscollectorProtocol) HasScanId() bool {
	if o != nil && !IsNil(o.ScanId) {
		return true
	}

	return false
}

// SetScanId gets a reference to the given int64 and assigns it to the ScanId field.
func (o *SyscollectorProtocol) SetScanId(v int64) {
	o.ScanId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SyscollectorProtocol) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyscollectorProtocol) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SyscollectorProtocol) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SyscollectorProtocol) SetType(v string) {
	o.Type = &v
}

// GetAgentId returns the AgentId field value if set, zero value otherwise.
func (o *SyscollectorProtocol) GetAgentId() string {
	if o == nil || IsNil(o.AgentId) {
		var ret string
		return ret
	}
	return *o.AgentId
}

// GetAgentIdOk returns a tuple with the AgentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyscollectorProtocol) GetAgentIdOk() (*string, bool) {
	if o == nil || IsNil(o.AgentId) {
		return nil, false
	}
	return o.AgentId, true
}

// HasAgentId returns a boolean if a field has been set.
func (o *SyscollectorProtocol) HasAgentId() bool {
	if o != nil && !IsNil(o.AgentId) {
		return true
	}

	return false
}

// SetAgentId gets a reference to the given string and assigns it to the AgentId field.
func (o *SyscollectorProtocol) SetAgentId(v string) {
	o.AgentId = &v
}

func (o SyscollectorProtocol) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyscollectorProtocol) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dhcp) {
		toSerialize["dhcp"] = o.Dhcp
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !IsNil(o.Iface) {
		toSerialize["iface"] = o.Iface
	}
	if !IsNil(o.ScanId) {
		toSerialize["scan_id"] = o.ScanId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.AgentId) {
		toSerialize["agent_id"] = o.AgentId
	}
	return toSerialize, nil
}

type NullableSyscollectorProtocol struct {
	value *SyscollectorProtocol
	isSet bool
}

func (v NullableSyscollectorProtocol) Get() *SyscollectorProtocol {
	return v.value
}

func (v *NullableSyscollectorProtocol) Set(val *SyscollectorProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableSyscollectorProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableSyscollectorProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyscollectorProtocol(val *SyscollectorProtocol) *NullableSyscollectorProtocol {
	return &NullableSyscollectorProtocol{value: val, isSet: true}
}

func (v NullableSyscollectorProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyscollectorProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


