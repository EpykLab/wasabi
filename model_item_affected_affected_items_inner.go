/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ItemAffectedAffectedItemsInner - struct for ItemAffectedAffectedItemsInner
type ItemAffectedAffectedItemsInner struct {
	MapmapOfStringAny *map[string]interface{}
	String *string
}

// map[string]interface{}AsItemAffectedAffectedItemsInner is a convenience function that returns map[string]interface{} wrapped in ItemAffectedAffectedItemsInner
func MapmapOfStringAnyAsItemAffectedAffectedItemsInner(v *map[string]interface{}) ItemAffectedAffectedItemsInner {
	return ItemAffectedAffectedItemsInner{
		MapmapOfStringAny: v,
	}
}

// stringAsItemAffectedAffectedItemsInner is a convenience function that returns string wrapped in ItemAffectedAffectedItemsInner
func StringAsItemAffectedAffectedItemsInner(v *string) ItemAffectedAffectedItemsInner {
	return ItemAffectedAffectedItemsInner{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ItemAffectedAffectedItemsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MapmapOfStringAny
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringAny)
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			if err = validator.Validate(dst.MapmapOfStringAny); err != nil {
				dst.MapmapOfStringAny = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapmapOfStringAny = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ItemAffectedAffectedItemsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ItemAffectedAffectedItemsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ItemAffectedAffectedItemsInner) MarshalJSON() ([]byte, error) {
	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ItemAffectedAffectedItemsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MapmapOfStringAny != nil {
		return obj.MapmapOfStringAny
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ItemAffectedAffectedItemsInner) GetActualInstanceValue() (interface{}) {
	if obj.MapmapOfStringAny != nil {
		return *obj.MapmapOfStringAny
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableItemAffectedAffectedItemsInner struct {
	value *ItemAffectedAffectedItemsInner
	isSet bool
}

func (v NullableItemAffectedAffectedItemsInner) Get() *ItemAffectedAffectedItemsInner {
	return v.value
}

func (v *NullableItemAffectedAffectedItemsInner) Set(val *ItemAffectedAffectedItemsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableItemAffectedAffectedItemsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableItemAffectedAffectedItemsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemAffectedAffectedItemsInner(val *ItemAffectedAffectedItemsInner) *NullableItemAffectedAffectedItemsInner {
	return &NullableItemAffectedAffectedItemsInner{value: val, isSet: true}
}

func (v NullableItemAffectedAffectedItemsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemAffectedAffectedItemsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


