/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the LastScan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LastScan{}

// LastScan struct for LastScan
type LastScan struct {
	// Date when the latest scan finished. If it is in progress, or no scans have been run, null will be returned
	End NullableTime `json:"end,omitempty"`
	// Date when the latest scan started. If no scans have been run, null will be returned
	Start NullableTime `json:"start,omitempty"`
}

// NewLastScan instantiates a new LastScan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLastScan() *LastScan {
	this := LastScan{}
	return &this
}

// NewLastScanWithDefaults instantiates a new LastScan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLastScanWithDefaults() *LastScan {
	this := LastScan{}
	return &this
}

// GetEnd returns the End field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LastScan) GetEnd() time.Time {
	if o == nil || IsNil(o.End.Get()) {
		var ret time.Time
		return ret
	}
	return *o.End.Get()
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LastScan) GetEndOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.End.Get(), o.End.IsSet()
}

// HasEnd returns a boolean if a field has been set.
func (o *LastScan) HasEnd() bool {
	if o != nil && o.End.IsSet() {
		return true
	}

	return false
}

// SetEnd gets a reference to the given NullableTime and assigns it to the End field.
func (o *LastScan) SetEnd(v time.Time) {
	o.End.Set(&v)
}
// SetEndNil sets the value for End to be an explicit nil
func (o *LastScan) SetEndNil() {
	o.End.Set(nil)
}

// UnsetEnd ensures that no value is present for End, not even an explicit nil
func (o *LastScan) UnsetEnd() {
	o.End.Unset()
}

// GetStart returns the Start field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LastScan) GetStart() time.Time {
	if o == nil || IsNil(o.Start.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Start.Get()
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LastScan) GetStartOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Start.Get(), o.Start.IsSet()
}

// HasStart returns a boolean if a field has been set.
func (o *LastScan) HasStart() bool {
	if o != nil && o.Start.IsSet() {
		return true
	}

	return false
}

// SetStart gets a reference to the given NullableTime and assigns it to the Start field.
func (o *LastScan) SetStart(v time.Time) {
	o.Start.Set(&v)
}
// SetStartNil sets the value for Start to be an explicit nil
func (o *LastScan) SetStartNil() {
	o.Start.Set(nil)
}

// UnsetStart ensures that no value is present for Start, not even an explicit nil
func (o *LastScan) UnsetStart() {
	o.Start.Unset()
}

func (o LastScan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LastScan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.End.IsSet() {
		toSerialize["end"] = o.End.Get()
	}
	if o.Start.IsSet() {
		toSerialize["start"] = o.Start.Get()
	}
	return toSerialize, nil
}

type NullableLastScan struct {
	value *LastScan
	isSet bool
}

func (v NullableLastScan) Get() *LastScan {
	return v.value
}

func (v *NullableLastScan) Set(val *LastScan) {
	v.value = val
	v.isSet = true
}

func (v NullableLastScan) IsSet() bool {
	return v.isSet
}

func (v *NullableLastScan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLastScan(val *LastScan) *NullableLastScan {
	return &NullableLastScan{value: val, isSet: true}
}

func (v NullableLastScan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLastScan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


