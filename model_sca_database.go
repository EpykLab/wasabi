/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the SCADatabase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SCADatabase{}

// SCADatabase struct for SCADatabase
type SCADatabase struct {
	// Brief description of what the policy is checking
	Description *string `json:"description,omitempty"`
	// When the last scan finished
	EndScan *time.Time `json:"end_scan,omitempty"`
	// Number of failed checks. If this number is higher than 0 the host has a vulnerability
	Fail *int32 `json:"fail,omitempty"`
	// Policy name
	Name *string `json:"name,omitempty"`
	// Number of passed checks
	Pass *int32 `json:"pass,omitempty"`
	// Policy ID
	PolicyId *string `json:"policy_id,omitempty"`
	// A link to a documentation page about the policy
	References *string `json:"references,omitempty"`
	// Percentage of passed checks
	Score *int32 `json:"score,omitempty"`
	// When the last scan started
	StartScan *time.Time `json:"start_scan,omitempty"`
}

// NewSCADatabase instantiates a new SCADatabase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSCADatabase() *SCADatabase {
	this := SCADatabase{}
	return &this
}

// NewSCADatabaseWithDefaults instantiates a new SCADatabase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSCADatabaseWithDefaults() *SCADatabase {
	this := SCADatabase{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SCADatabase) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCADatabase) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SCADatabase) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SCADatabase) SetDescription(v string) {
	o.Description = &v
}

// GetEndScan returns the EndScan field value if set, zero value otherwise.
func (o *SCADatabase) GetEndScan() time.Time {
	if o == nil || IsNil(o.EndScan) {
		var ret time.Time
		return ret
	}
	return *o.EndScan
}

// GetEndScanOk returns a tuple with the EndScan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCADatabase) GetEndScanOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndScan) {
		return nil, false
	}
	return o.EndScan, true
}

// HasEndScan returns a boolean if a field has been set.
func (o *SCADatabase) HasEndScan() bool {
	if o != nil && !IsNil(o.EndScan) {
		return true
	}

	return false
}

// SetEndScan gets a reference to the given time.Time and assigns it to the EndScan field.
func (o *SCADatabase) SetEndScan(v time.Time) {
	o.EndScan = &v
}

// GetFail returns the Fail field value if set, zero value otherwise.
func (o *SCADatabase) GetFail() int32 {
	if o == nil || IsNil(o.Fail) {
		var ret int32
		return ret
	}
	return *o.Fail
}

// GetFailOk returns a tuple with the Fail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCADatabase) GetFailOk() (*int32, bool) {
	if o == nil || IsNil(o.Fail) {
		return nil, false
	}
	return o.Fail, true
}

// HasFail returns a boolean if a field has been set.
func (o *SCADatabase) HasFail() bool {
	if o != nil && !IsNil(o.Fail) {
		return true
	}

	return false
}

// SetFail gets a reference to the given int32 and assigns it to the Fail field.
func (o *SCADatabase) SetFail(v int32) {
	o.Fail = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SCADatabase) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCADatabase) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SCADatabase) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SCADatabase) SetName(v string) {
	o.Name = &v
}

// GetPass returns the Pass field value if set, zero value otherwise.
func (o *SCADatabase) GetPass() int32 {
	if o == nil || IsNil(o.Pass) {
		var ret int32
		return ret
	}
	return *o.Pass
}

// GetPassOk returns a tuple with the Pass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCADatabase) GetPassOk() (*int32, bool) {
	if o == nil || IsNil(o.Pass) {
		return nil, false
	}
	return o.Pass, true
}

// HasPass returns a boolean if a field has been set.
func (o *SCADatabase) HasPass() bool {
	if o != nil && !IsNil(o.Pass) {
		return true
	}

	return false
}

// SetPass gets a reference to the given int32 and assigns it to the Pass field.
func (o *SCADatabase) SetPass(v int32) {
	o.Pass = &v
}

// GetPolicyId returns the PolicyId field value if set, zero value otherwise.
func (o *SCADatabase) GetPolicyId() string {
	if o == nil || IsNil(o.PolicyId) {
		var ret string
		return ret
	}
	return *o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCADatabase) GetPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyId) {
		return nil, false
	}
	return o.PolicyId, true
}

// HasPolicyId returns a boolean if a field has been set.
func (o *SCADatabase) HasPolicyId() bool {
	if o != nil && !IsNil(o.PolicyId) {
		return true
	}

	return false
}

// SetPolicyId gets a reference to the given string and assigns it to the PolicyId field.
func (o *SCADatabase) SetPolicyId(v string) {
	o.PolicyId = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *SCADatabase) GetReferences() string {
	if o == nil || IsNil(o.References) {
		var ret string
		return ret
	}
	return *o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCADatabase) GetReferencesOk() (*string, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *SCADatabase) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given string and assigns it to the References field.
func (o *SCADatabase) SetReferences(v string) {
	o.References = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *SCADatabase) GetScore() int32 {
	if o == nil || IsNil(o.Score) {
		var ret int32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCADatabase) GetScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *SCADatabase) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given int32 and assigns it to the Score field.
func (o *SCADatabase) SetScore(v int32) {
	o.Score = &v
}

// GetStartScan returns the StartScan field value if set, zero value otherwise.
func (o *SCADatabase) GetStartScan() time.Time {
	if o == nil || IsNil(o.StartScan) {
		var ret time.Time
		return ret
	}
	return *o.StartScan
}

// GetStartScanOk returns a tuple with the StartScan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCADatabase) GetStartScanOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartScan) {
		return nil, false
	}
	return o.StartScan, true
}

// HasStartScan returns a boolean if a field has been set.
func (o *SCADatabase) HasStartScan() bool {
	if o != nil && !IsNil(o.StartScan) {
		return true
	}

	return false
}

// SetStartScan gets a reference to the given time.Time and assigns it to the StartScan field.
func (o *SCADatabase) SetStartScan(v time.Time) {
	o.StartScan = &v
}

func (o SCADatabase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SCADatabase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EndScan) {
		toSerialize["end_scan"] = o.EndScan
	}
	if !IsNil(o.Fail) {
		toSerialize["fail"] = o.Fail
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Pass) {
		toSerialize["pass"] = o.Pass
	}
	if !IsNil(o.PolicyId) {
		toSerialize["policy_id"] = o.PolicyId
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !IsNil(o.StartScan) {
		toSerialize["start_scan"] = o.StartScan
	}
	return toSerialize, nil
}

type NullableSCADatabase struct {
	value *SCADatabase
	isSet bool
}

func (v NullableSCADatabase) Get() *SCADatabase {
	return v.value
}

func (v *NullableSCADatabase) Set(val *SCADatabase) {
	v.value = val
	v.isSet = true
}

func (v NullableSCADatabase) IsSet() bool {
	return v.isSet
}

func (v *NullableSCADatabase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSCADatabase(val *SCADatabase) *NullableSCADatabase {
	return &NullableSCADatabase{value: val, isSet: true}
}

func (v NullableSCADatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSCADatabase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


