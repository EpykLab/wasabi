/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the NetworkInterfaceSentPackets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkInterfaceSentPackets{}

// NetworkInterfaceSentPackets Information related to sent packets in the network interface
type NetworkInterfaceSentPackets struct {
	// Number of bytes in the network interface
	Bytes *int32 `json:"bytes,omitempty"`
	// Number of dropped packages in the network interface
	Dropped *int32 `json:"dropped,omitempty"`
	// Number of packages containing any error in the network interface
	Error *int32 `json:"error,omitempty"`
	// Number of packages in the network interface
	Packets *int32 `json:"packets,omitempty"`
}

// NewNetworkInterfaceSentPackets instantiates a new NetworkInterfaceSentPackets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkInterfaceSentPackets() *NetworkInterfaceSentPackets {
	this := NetworkInterfaceSentPackets{}
	return &this
}

// NewNetworkInterfaceSentPacketsWithDefaults instantiates a new NetworkInterfaceSentPackets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkInterfaceSentPacketsWithDefaults() *NetworkInterfaceSentPackets {
	this := NetworkInterfaceSentPackets{}
	return &this
}

// GetBytes returns the Bytes field value if set, zero value otherwise.
func (o *NetworkInterfaceSentPackets) GetBytes() int32 {
	if o == nil || IsNil(o.Bytes) {
		var ret int32
		return ret
	}
	return *o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceSentPackets) GetBytesOk() (*int32, bool) {
	if o == nil || IsNil(o.Bytes) {
		return nil, false
	}
	return o.Bytes, true
}

// HasBytes returns a boolean if a field has been set.
func (o *NetworkInterfaceSentPackets) HasBytes() bool {
	if o != nil && !IsNil(o.Bytes) {
		return true
	}

	return false
}

// SetBytes gets a reference to the given int32 and assigns it to the Bytes field.
func (o *NetworkInterfaceSentPackets) SetBytes(v int32) {
	o.Bytes = &v
}

// GetDropped returns the Dropped field value if set, zero value otherwise.
func (o *NetworkInterfaceSentPackets) GetDropped() int32 {
	if o == nil || IsNil(o.Dropped) {
		var ret int32
		return ret
	}
	return *o.Dropped
}

// GetDroppedOk returns a tuple with the Dropped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceSentPackets) GetDroppedOk() (*int32, bool) {
	if o == nil || IsNil(o.Dropped) {
		return nil, false
	}
	return o.Dropped, true
}

// HasDropped returns a boolean if a field has been set.
func (o *NetworkInterfaceSentPackets) HasDropped() bool {
	if o != nil && !IsNil(o.Dropped) {
		return true
	}

	return false
}

// SetDropped gets a reference to the given int32 and assigns it to the Dropped field.
func (o *NetworkInterfaceSentPackets) SetDropped(v int32) {
	o.Dropped = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *NetworkInterfaceSentPackets) GetError() int32 {
	if o == nil || IsNil(o.Error) {
		var ret int32
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceSentPackets) GetErrorOk() (*int32, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *NetworkInterfaceSentPackets) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given int32 and assigns it to the Error field.
func (o *NetworkInterfaceSentPackets) SetError(v int32) {
	o.Error = &v
}

// GetPackets returns the Packets field value if set, zero value otherwise.
func (o *NetworkInterfaceSentPackets) GetPackets() int32 {
	if o == nil || IsNil(o.Packets) {
		var ret int32
		return ret
	}
	return *o.Packets
}

// GetPacketsOk returns a tuple with the Packets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceSentPackets) GetPacketsOk() (*int32, bool) {
	if o == nil || IsNil(o.Packets) {
		return nil, false
	}
	return o.Packets, true
}

// HasPackets returns a boolean if a field has been set.
func (o *NetworkInterfaceSentPackets) HasPackets() bool {
	if o != nil && !IsNil(o.Packets) {
		return true
	}

	return false
}

// SetPackets gets a reference to the given int32 and assigns it to the Packets field.
func (o *NetworkInterfaceSentPackets) SetPackets(v int32) {
	o.Packets = &v
}

func (o NetworkInterfaceSentPackets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkInterfaceSentPackets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bytes) {
		toSerialize["bytes"] = o.Bytes
	}
	if !IsNil(o.Dropped) {
		toSerialize["dropped"] = o.Dropped
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Packets) {
		toSerialize["packets"] = o.Packets
	}
	return toSerialize, nil
}

type NullableNetworkInterfaceSentPackets struct {
	value *NetworkInterfaceSentPackets
	isSet bool
}

func (v NullableNetworkInterfaceSentPackets) Get() *NetworkInterfaceSentPackets {
	return v.value
}

func (v *NullableNetworkInterfaceSentPackets) Set(val *NetworkInterfaceSentPackets) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInterfaceSentPackets) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInterfaceSentPackets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInterfaceSentPackets(val *NetworkInterfaceSentPackets) *NullableNetworkInterfaceSentPackets {
	return &NullableNetworkInterfaceSentPackets{value: val, isSet: true}
}

func (v NullableNetworkInterfaceSentPackets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInterfaceSentPackets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


