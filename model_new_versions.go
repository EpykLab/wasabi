/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the NewVersions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewVersions{}

// NewVersions struct for NewVersions
type NewVersions struct {
	// Datetime of the last query to the CTI service
	LastCheckDate *string `json:"last_check_date,omitempty"`
	// Current version in the format vX.Y.Z
	CurrentVersion *string `json:"current_version,omitempty"`
	// Flag that indicates if the service is enabled
	UpdateCheck *bool `json:"update_check,omitempty"`
	LastAvailableMajor *NewVersionsLastAvailableMajor `json:"last_available_major,omitempty"`
	LastAvailableMinor *NewVersionsLastAvailableMinor `json:"last_available_minor,omitempty"`
	LastAvailablePatch *NewVersionsLastAvailablePatch `json:"last_available_patch,omitempty"`
	// Identifier of the Wazuh instance
	Uuid *string `json:"uuid,omitempty"`
}

// NewNewVersions instantiates a new NewVersions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewVersions() *NewVersions {
	this := NewVersions{}
	return &this
}

// NewNewVersionsWithDefaults instantiates a new NewVersions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewVersionsWithDefaults() *NewVersions {
	this := NewVersions{}
	return &this
}

// GetLastCheckDate returns the LastCheckDate field value if set, zero value otherwise.
func (o *NewVersions) GetLastCheckDate() string {
	if o == nil || IsNil(o.LastCheckDate) {
		var ret string
		return ret
	}
	return *o.LastCheckDate
}

// GetLastCheckDateOk returns a tuple with the LastCheckDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewVersions) GetLastCheckDateOk() (*string, bool) {
	if o == nil || IsNil(o.LastCheckDate) {
		return nil, false
	}
	return o.LastCheckDate, true
}

// HasLastCheckDate returns a boolean if a field has been set.
func (o *NewVersions) HasLastCheckDate() bool {
	if o != nil && !IsNil(o.LastCheckDate) {
		return true
	}

	return false
}

// SetLastCheckDate gets a reference to the given string and assigns it to the LastCheckDate field.
func (o *NewVersions) SetLastCheckDate(v string) {
	o.LastCheckDate = &v
}

// GetCurrentVersion returns the CurrentVersion field value if set, zero value otherwise.
func (o *NewVersions) GetCurrentVersion() string {
	if o == nil || IsNil(o.CurrentVersion) {
		var ret string
		return ret
	}
	return *o.CurrentVersion
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewVersions) GetCurrentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentVersion) {
		return nil, false
	}
	return o.CurrentVersion, true
}

// HasCurrentVersion returns a boolean if a field has been set.
func (o *NewVersions) HasCurrentVersion() bool {
	if o != nil && !IsNil(o.CurrentVersion) {
		return true
	}

	return false
}

// SetCurrentVersion gets a reference to the given string and assigns it to the CurrentVersion field.
func (o *NewVersions) SetCurrentVersion(v string) {
	o.CurrentVersion = &v
}

// GetUpdateCheck returns the UpdateCheck field value if set, zero value otherwise.
func (o *NewVersions) GetUpdateCheck() bool {
	if o == nil || IsNil(o.UpdateCheck) {
		var ret bool
		return ret
	}
	return *o.UpdateCheck
}

// GetUpdateCheckOk returns a tuple with the UpdateCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewVersions) GetUpdateCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateCheck) {
		return nil, false
	}
	return o.UpdateCheck, true
}

// HasUpdateCheck returns a boolean if a field has been set.
func (o *NewVersions) HasUpdateCheck() bool {
	if o != nil && !IsNil(o.UpdateCheck) {
		return true
	}

	return false
}

// SetUpdateCheck gets a reference to the given bool and assigns it to the UpdateCheck field.
func (o *NewVersions) SetUpdateCheck(v bool) {
	o.UpdateCheck = &v
}

// GetLastAvailableMajor returns the LastAvailableMajor field value if set, zero value otherwise.
func (o *NewVersions) GetLastAvailableMajor() NewVersionsLastAvailableMajor {
	if o == nil || IsNil(o.LastAvailableMajor) {
		var ret NewVersionsLastAvailableMajor
		return ret
	}
	return *o.LastAvailableMajor
}

// GetLastAvailableMajorOk returns a tuple with the LastAvailableMajor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewVersions) GetLastAvailableMajorOk() (*NewVersionsLastAvailableMajor, bool) {
	if o == nil || IsNil(o.LastAvailableMajor) {
		return nil, false
	}
	return o.LastAvailableMajor, true
}

// HasLastAvailableMajor returns a boolean if a field has been set.
func (o *NewVersions) HasLastAvailableMajor() bool {
	if o != nil && !IsNil(o.LastAvailableMajor) {
		return true
	}

	return false
}

// SetLastAvailableMajor gets a reference to the given NewVersionsLastAvailableMajor and assigns it to the LastAvailableMajor field.
func (o *NewVersions) SetLastAvailableMajor(v NewVersionsLastAvailableMajor) {
	o.LastAvailableMajor = &v
}

// GetLastAvailableMinor returns the LastAvailableMinor field value if set, zero value otherwise.
func (o *NewVersions) GetLastAvailableMinor() NewVersionsLastAvailableMinor {
	if o == nil || IsNil(o.LastAvailableMinor) {
		var ret NewVersionsLastAvailableMinor
		return ret
	}
	return *o.LastAvailableMinor
}

// GetLastAvailableMinorOk returns a tuple with the LastAvailableMinor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewVersions) GetLastAvailableMinorOk() (*NewVersionsLastAvailableMinor, bool) {
	if o == nil || IsNil(o.LastAvailableMinor) {
		return nil, false
	}
	return o.LastAvailableMinor, true
}

// HasLastAvailableMinor returns a boolean if a field has been set.
func (o *NewVersions) HasLastAvailableMinor() bool {
	if o != nil && !IsNil(o.LastAvailableMinor) {
		return true
	}

	return false
}

// SetLastAvailableMinor gets a reference to the given NewVersionsLastAvailableMinor and assigns it to the LastAvailableMinor field.
func (o *NewVersions) SetLastAvailableMinor(v NewVersionsLastAvailableMinor) {
	o.LastAvailableMinor = &v
}

// GetLastAvailablePatch returns the LastAvailablePatch field value if set, zero value otherwise.
func (o *NewVersions) GetLastAvailablePatch() NewVersionsLastAvailablePatch {
	if o == nil || IsNil(o.LastAvailablePatch) {
		var ret NewVersionsLastAvailablePatch
		return ret
	}
	return *o.LastAvailablePatch
}

// GetLastAvailablePatchOk returns a tuple with the LastAvailablePatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewVersions) GetLastAvailablePatchOk() (*NewVersionsLastAvailablePatch, bool) {
	if o == nil || IsNil(o.LastAvailablePatch) {
		return nil, false
	}
	return o.LastAvailablePatch, true
}

// HasLastAvailablePatch returns a boolean if a field has been set.
func (o *NewVersions) HasLastAvailablePatch() bool {
	if o != nil && !IsNil(o.LastAvailablePatch) {
		return true
	}

	return false
}

// SetLastAvailablePatch gets a reference to the given NewVersionsLastAvailablePatch and assigns it to the LastAvailablePatch field.
func (o *NewVersions) SetLastAvailablePatch(v NewVersionsLastAvailablePatch) {
	o.LastAvailablePatch = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *NewVersions) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewVersions) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *NewVersions) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *NewVersions) SetUuid(v string) {
	o.Uuid = &v
}

func (o NewVersions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewVersions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LastCheckDate) {
		toSerialize["last_check_date"] = o.LastCheckDate
	}
	if !IsNil(o.CurrentVersion) {
		toSerialize["current_version"] = o.CurrentVersion
	}
	if !IsNil(o.UpdateCheck) {
		toSerialize["update_check"] = o.UpdateCheck
	}
	if !IsNil(o.LastAvailableMajor) {
		toSerialize["last_available_major"] = o.LastAvailableMajor
	}
	if !IsNil(o.LastAvailableMinor) {
		toSerialize["last_available_minor"] = o.LastAvailableMinor
	}
	if !IsNil(o.LastAvailablePatch) {
		toSerialize["last_available_patch"] = o.LastAvailablePatch
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableNewVersions struct {
	value *NewVersions
	isSet bool
}

func (v NullableNewVersions) Get() *NewVersions {
	return v.value
}

func (v *NullableNewVersions) Set(val *NewVersions) {
	v.value = val
	v.isSet = true
}

func (v NullableNewVersions) IsSet() bool {
	return v.isSet
}

func (v *NullableNewVersions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewVersions(val *NewVersions) *NullableNewVersions {
	return &NullableNewVersions{value: val, isSet: true}
}

func (v NullableNewVersions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewVersions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


