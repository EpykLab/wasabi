/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SCAChecks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SCAChecks{}

// SCAChecks struct for SCAChecks
type SCAChecks struct {
	// A description of what is being checked
	Description *string `json:"description,omitempty"`
	// Analyzed directories
	Directory *string `json:"directory,omitempty"`
	// Analyzed file path
	File *string `json:"file,omitempty"`
	// Policy check ID. A policy contains multiple checks
	Id *int32 `json:"id,omitempty"`
	// Scanned policy ID
	PolicyId *string `json:"policy_id,omitempty"`
	// Check whether a process is running or not. It's only returned when the checked process is running
	Process *string `json:"process,omitempty"`
	// Explain why this check is necessary
	Rationale *string `json:"rationale,omitempty"`
	// A link to a documentation page about the check
	References *string `json:"references,omitempty"`
	// Analyzed registry
	Registry *string `json:"registry,omitempty"`
	// Explain how to fix the check, this field is very useful in case the check failed
	Remediation *string `json:"remediation,omitempty"`
	// Check result
	Result *string `json:"result,omitempty"`
	// A brief description of what is being checked
	Title *string `json:"title,omitempty"`
	// Specify how rule results are aggregated in order to calculate the final value of a check
	Condition *string `json:"condition,omitempty"`
}

// NewSCAChecks instantiates a new SCAChecks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSCAChecks() *SCAChecks {
	this := SCAChecks{}
	return &this
}

// NewSCAChecksWithDefaults instantiates a new SCAChecks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSCAChecksWithDefaults() *SCAChecks {
	this := SCAChecks{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SCAChecks) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCAChecks) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SCAChecks) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SCAChecks) SetDescription(v string) {
	o.Description = &v
}

// GetDirectory returns the Directory field value if set, zero value otherwise.
func (o *SCAChecks) GetDirectory() string {
	if o == nil || IsNil(o.Directory) {
		var ret string
		return ret
	}
	return *o.Directory
}

// GetDirectoryOk returns a tuple with the Directory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCAChecks) GetDirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.Directory) {
		return nil, false
	}
	return o.Directory, true
}

// HasDirectory returns a boolean if a field has been set.
func (o *SCAChecks) HasDirectory() bool {
	if o != nil && !IsNil(o.Directory) {
		return true
	}

	return false
}

// SetDirectory gets a reference to the given string and assigns it to the Directory field.
func (o *SCAChecks) SetDirectory(v string) {
	o.Directory = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *SCAChecks) GetFile() string {
	if o == nil || IsNil(o.File) {
		var ret string
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCAChecks) GetFileOk() (*string, bool) {
	if o == nil || IsNil(o.File) {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *SCAChecks) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given string and assigns it to the File field.
func (o *SCAChecks) SetFile(v string) {
	o.File = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SCAChecks) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCAChecks) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SCAChecks) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SCAChecks) SetId(v int32) {
	o.Id = &v
}

// GetPolicyId returns the PolicyId field value if set, zero value otherwise.
func (o *SCAChecks) GetPolicyId() string {
	if o == nil || IsNil(o.PolicyId) {
		var ret string
		return ret
	}
	return *o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCAChecks) GetPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyId) {
		return nil, false
	}
	return o.PolicyId, true
}

// HasPolicyId returns a boolean if a field has been set.
func (o *SCAChecks) HasPolicyId() bool {
	if o != nil && !IsNil(o.PolicyId) {
		return true
	}

	return false
}

// SetPolicyId gets a reference to the given string and assigns it to the PolicyId field.
func (o *SCAChecks) SetPolicyId(v string) {
	o.PolicyId = &v
}

// GetProcess returns the Process field value if set, zero value otherwise.
func (o *SCAChecks) GetProcess() string {
	if o == nil || IsNil(o.Process) {
		var ret string
		return ret
	}
	return *o.Process
}

// GetProcessOk returns a tuple with the Process field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCAChecks) GetProcessOk() (*string, bool) {
	if o == nil || IsNil(o.Process) {
		return nil, false
	}
	return o.Process, true
}

// HasProcess returns a boolean if a field has been set.
func (o *SCAChecks) HasProcess() bool {
	if o != nil && !IsNil(o.Process) {
		return true
	}

	return false
}

// SetProcess gets a reference to the given string and assigns it to the Process field.
func (o *SCAChecks) SetProcess(v string) {
	o.Process = &v
}

// GetRationale returns the Rationale field value if set, zero value otherwise.
func (o *SCAChecks) GetRationale() string {
	if o == nil || IsNil(o.Rationale) {
		var ret string
		return ret
	}
	return *o.Rationale
}

// GetRationaleOk returns a tuple with the Rationale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCAChecks) GetRationaleOk() (*string, bool) {
	if o == nil || IsNil(o.Rationale) {
		return nil, false
	}
	return o.Rationale, true
}

// HasRationale returns a boolean if a field has been set.
func (o *SCAChecks) HasRationale() bool {
	if o != nil && !IsNil(o.Rationale) {
		return true
	}

	return false
}

// SetRationale gets a reference to the given string and assigns it to the Rationale field.
func (o *SCAChecks) SetRationale(v string) {
	o.Rationale = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *SCAChecks) GetReferences() string {
	if o == nil || IsNil(o.References) {
		var ret string
		return ret
	}
	return *o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCAChecks) GetReferencesOk() (*string, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *SCAChecks) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given string and assigns it to the References field.
func (o *SCAChecks) SetReferences(v string) {
	o.References = &v
}

// GetRegistry returns the Registry field value if set, zero value otherwise.
func (o *SCAChecks) GetRegistry() string {
	if o == nil || IsNil(o.Registry) {
		var ret string
		return ret
	}
	return *o.Registry
}

// GetRegistryOk returns a tuple with the Registry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCAChecks) GetRegistryOk() (*string, bool) {
	if o == nil || IsNil(o.Registry) {
		return nil, false
	}
	return o.Registry, true
}

// HasRegistry returns a boolean if a field has been set.
func (o *SCAChecks) HasRegistry() bool {
	if o != nil && !IsNil(o.Registry) {
		return true
	}

	return false
}

// SetRegistry gets a reference to the given string and assigns it to the Registry field.
func (o *SCAChecks) SetRegistry(v string) {
	o.Registry = &v
}

// GetRemediation returns the Remediation field value if set, zero value otherwise.
func (o *SCAChecks) GetRemediation() string {
	if o == nil || IsNil(o.Remediation) {
		var ret string
		return ret
	}
	return *o.Remediation
}

// GetRemediationOk returns a tuple with the Remediation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCAChecks) GetRemediationOk() (*string, bool) {
	if o == nil || IsNil(o.Remediation) {
		return nil, false
	}
	return o.Remediation, true
}

// HasRemediation returns a boolean if a field has been set.
func (o *SCAChecks) HasRemediation() bool {
	if o != nil && !IsNil(o.Remediation) {
		return true
	}

	return false
}

// SetRemediation gets a reference to the given string and assigns it to the Remediation field.
func (o *SCAChecks) SetRemediation(v string) {
	o.Remediation = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *SCAChecks) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCAChecks) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *SCAChecks) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *SCAChecks) SetResult(v string) {
	o.Result = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SCAChecks) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCAChecks) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SCAChecks) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SCAChecks) SetTitle(v string) {
	o.Title = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *SCAChecks) GetCondition() string {
	if o == nil || IsNil(o.Condition) {
		var ret string
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCAChecks) GetConditionOk() (*string, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *SCAChecks) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given string and assigns it to the Condition field.
func (o *SCAChecks) SetCondition(v string) {
	o.Condition = &v
}

func (o SCAChecks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SCAChecks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Directory) {
		toSerialize["directory"] = o.Directory
	}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PolicyId) {
		toSerialize["policy_id"] = o.PolicyId
	}
	if !IsNil(o.Process) {
		toSerialize["process"] = o.Process
	}
	if !IsNil(o.Rationale) {
		toSerialize["rationale"] = o.Rationale
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if !IsNil(o.Registry) {
		toSerialize["registry"] = o.Registry
	}
	if !IsNil(o.Remediation) {
		toSerialize["remediation"] = o.Remediation
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	return toSerialize, nil
}

type NullableSCAChecks struct {
	value *SCAChecks
	isSet bool
}

func (v NullableSCAChecks) Get() *SCAChecks {
	return v.value
}

func (v *NullableSCAChecks) Set(val *SCAChecks) {
	v.value = val
	v.isSet = true
}

func (v NullableSCAChecks) IsSet() bool {
	return v.isSet
}

func (v *NullableSCAChecks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSCAChecks(val *SCAChecks) *NullableSCAChecks {
	return &NullableSCAChecks{value: val, isSet: true}
}

func (v NullableSCAChecks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSCAChecks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


