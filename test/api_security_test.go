/*
Wazuh API REST

Testing SecurityAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/EpykLab/wasabi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_SecurityAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerAddPolicy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerAddPolicy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerAddRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerAddRole(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerAddRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerAddRule(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerCreateUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerCreateUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerDeleteSecurityConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerDeleteSecurityConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerDeleteUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerDeleteUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerDeprecatedLoginUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerDeprecatedLoginUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerEditRunAs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerEditRunAs(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerGetPolicies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerGetPolicies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerGetRbacActions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerGetRbacActions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerGetRbacResources", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerGetRbacResources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerGetRoles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerGetRoles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerGetRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerGetRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerGetSecurityConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerGetSecurityConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerGetUserMe", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerGetUserMe(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerGetUserMePolicies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerGetUserMePolicies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerGetUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerGetUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerLoginUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerLoginUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerLogoutUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerLogoutUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerPutSecurityConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerPutSecurityConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerRemovePolicies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerRemovePolicies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerRemoveRolePolicy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleId string

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerRemoveRolePolicy(context.Background(), roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerRemoveRoleRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleId string

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerRemoveRoleRule(context.Background(), roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerRemoveRoles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerRemoveRoles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerRemoveRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerRemoveRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerRemoveUserRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerRemoveUserRole(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerRevokeAllTokens", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerRevokeAllTokens(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerRunAsLogin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerRunAsLogin(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerSetRolePolicy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleId string

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerSetRolePolicy(context.Background(), roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerSetRoleRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleId string

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerSetRoleRule(context.Background(), roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerSetUserRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerSetUserRole(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerUpdatePolicy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var policyId string

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerUpdatePolicy(context.Background(), policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerUpdateRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleId string

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerUpdateRole(context.Background(), roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerUpdateRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var ruleId string

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerUpdateRule(context.Background(), ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService ApiControllersSecurityControllerUpdateUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.SecurityAPI.ApiControllersSecurityControllerUpdateUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
