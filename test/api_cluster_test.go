/*
Wazuh API REST

Testing ClusterAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/EpykLab/wasabi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_ClusterAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetApiConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetApiConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetClusterNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetClusterNode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetClusterNodes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetClusterNodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetConfValidation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetConfValidation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetConfigurationNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetConfigurationNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetDaemonStatsNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetDaemonStatsNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetHealthcheck", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetHealthcheck(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetInfoNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetInfoNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetLogNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetLogNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetLogSummaryNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetLogSummaryNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetNodeConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nodeId string
		var component string
		var configuration string

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetNodeConfig(context.Background(), nodeId, component, configuration).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetNodesRulesetSyncStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetNodesRulesetSyncStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetStatsAnalysisdNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetStatsAnalysisdNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetStatsHourlyNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetStatsHourlyNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetStatsNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetStatsNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetStatsRemotedNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetStatsRemotedNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetStatsWeeklyNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetStatsWeeklyNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerGetStatusNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerGetStatusNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerPutRestart", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerPutRestart(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterAPIService ApiControllersClusterControllerUpdateConfiguration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.ClusterAPI.ApiControllersClusterControllerUpdateConfiguration(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
