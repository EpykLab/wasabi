/*
Wazuh API REST

Testing AgentsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/EpykLab/wasabi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_AgentsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AgentsAPIService ApiControllersAgentControllerAddAgent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerAddAgent(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerDeleteAgents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerDeleteAgents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerDeleteMultipleAgentSingleGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerDeleteMultipleAgentSingleGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerDeleteSingleAgentMultipleGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId string

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerDeleteSingleAgentMultipleGroups(context.Background(), agentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerDeleteSingleAgentSingleGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId string
		var groupId string

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerDeleteSingleAgentSingleGroup(context.Background(), agentId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerGetAgentConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId string
		var component string
		var configuration string

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerGetAgentConfig(context.Background(), agentId, component, configuration).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerGetAgentFields", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerGetAgentFields(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerGetAgentKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId string

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerGetAgentKey(context.Background(), agentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerGetAgentNoGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerGetAgentNoGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerGetAgentOutdated", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerGetAgentOutdated(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerGetAgentSummaryOs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerGetAgentSummaryOs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerGetAgentSummaryStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerGetAgentSummaryStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerGetAgentUninstallPermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerGetAgentUninstallPermission(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerGetAgentUpgrade", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerGetAgentUpgrade(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerGetAgents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerGetAgents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerGetComponentStats", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId string
		var component string

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerGetComponentStats(context.Background(), agentId, component).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerGetDaemonStats", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId string

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerGetDaemonStats(context.Background(), agentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerGetSyncAgent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId string

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerGetSyncAgent(context.Background(), agentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerInsertAgent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerInsertAgent(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerPostNewAgent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerPostNewAgent(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerPutAgentSingleGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId string
		var groupId string

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerPutAgentSingleGroup(context.Background(), agentId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerPutMultipleAgentSingleGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerPutMultipleAgentSingleGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerPutUpgradeAgents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerPutUpgradeAgents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerPutUpgradeCustomAgents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerPutUpgradeCustomAgents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerReconnectAgents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerReconnectAgents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerRestartAgent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var agentId string

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerRestartAgent(context.Background(), agentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerRestartAgents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerRestartAgents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerRestartAgentsByGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var groupId string

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerRestartAgentsByGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService ApiControllersAgentControllerRestartAgentsByNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.AgentsAPI.ApiControllersAgentControllerRestartAgentsByNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
