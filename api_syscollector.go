/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// SyscollectorAPIService SyscollectorAPI service
type SyscollectorAPIService service

type ApiApiControllersSyscollectorControllerGetHardwareInfoRequest struct {
	ctx context.Context
	ApiService *SyscollectorAPIService
	agentId string
	pretty *bool
	waitForComplete *bool
	select_ *[]string
}

// Show results in human-readable format
func (r ApiApiControllersSyscollectorControllerGetHardwareInfoRequest) Pretty(pretty bool) ApiApiControllersSyscollectorControllerGetHardwareInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersSyscollectorControllerGetHardwareInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersSyscollectorControllerGetHardwareInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscollectorControllerGetHardwareInfoRequest) Select_(select_ []string) ApiApiControllersSyscollectorControllerGetHardwareInfoRequest {
	r.select_ = &select_
	return r
}

func (r ApiApiControllersSyscollectorControllerGetHardwareInfoRequest) Execute() (*ApiControllersExperimentalControllerGetHardwareInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersSyscollectorControllerGetHardwareInfoExecute(r)
}

/*
ApiControllersSyscollectorControllerGetHardwareInfo Get agent hardware

Return the agent's hardware info. This information include cpu, ram, scan info among others

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId Agent ID. All possible values from 000 onwards
 @return ApiApiControllersSyscollectorControllerGetHardwareInfoRequest
*/
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetHardwareInfo(ctx context.Context, agentId string) ApiApiControllersSyscollectorControllerGetHardwareInfoRequest {
	return ApiApiControllersSyscollectorControllerGetHardwareInfoRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetHardwareInfo200Response
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetHardwareInfoExecute(r ApiApiControllersSyscollectorControllerGetHardwareInfoRequest) (*ApiControllersExperimentalControllerGetHardwareInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetHardwareInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyscollectorAPIService.ApiControllersSyscollectorControllerGetHardwareInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/syscollector/{agent_id}/hardware"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.agentId) < 3 {
		return localVarReturnValue, nil, reportError("agentId must have at least 3 elements")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersSyscollectorControllerGetHotfixInfoRequest struct {
	ctx context.Context
	ApiService *SyscollectorAPIService
	agentId string
	pretty *bool
	waitForComplete *bool
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	hotfix *string
	q *string
	distinct *bool
}

// Show results in human-readable format
func (r ApiApiControllersSyscollectorControllerGetHotfixInfoRequest) Pretty(pretty bool) ApiApiControllersSyscollectorControllerGetHotfixInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersSyscollectorControllerGetHotfixInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersSyscollectorControllerGetHotfixInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// First element to return in the collection
func (r ApiApiControllersSyscollectorControllerGetHotfixInfoRequest) Offset(offset int32) ApiApiControllersSyscollectorControllerGetHotfixInfoRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersSyscollectorControllerGetHotfixInfoRequest) Limit(limit int32) ApiApiControllersSyscollectorControllerGetHotfixInfoRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscollectorControllerGetHotfixInfoRequest) Sort(sort string) ApiApiControllersSyscollectorControllerGetHotfixInfoRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersSyscollectorControllerGetHotfixInfoRequest) Search(search string) ApiApiControllersSyscollectorControllerGetHotfixInfoRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscollectorControllerGetHotfixInfoRequest) Select_(select_ []string) ApiApiControllersSyscollectorControllerGetHotfixInfoRequest {
	r.select_ = &select_
	return r
}

// Filter by hotfix
func (r ApiApiControllersSyscollectorControllerGetHotfixInfoRequest) Hotfix(hotfix string) ApiApiControllersSyscollectorControllerGetHotfixInfoRequest {
	r.hotfix = &hotfix
	return r
}

// Query to filter results by. For example q&#x3D;&amp;quot;status&#x3D;active&amp;quot;
func (r ApiApiControllersSyscollectorControllerGetHotfixInfoRequest) Q(q string) ApiApiControllersSyscollectorControllerGetHotfixInfoRequest {
	r.q = &q
	return r
}

// Look for distinct values.
func (r ApiApiControllersSyscollectorControllerGetHotfixInfoRequest) Distinct(distinct bool) ApiApiControllersSyscollectorControllerGetHotfixInfoRequest {
	r.distinct = &distinct
	return r
}

func (r ApiApiControllersSyscollectorControllerGetHotfixInfoRequest) Execute() (*ApiControllersExperimentalControllerGetHotfixesInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersSyscollectorControllerGetHotfixInfoExecute(r)
}

/*
ApiControllersSyscollectorControllerGetHotfixInfo Get agent hotfixes

Return all hotfixes installed by Microsoft(R) in Windows(R) systems (KB... fixes)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId Agent ID. All possible values from 000 onwards
 @return ApiApiControllersSyscollectorControllerGetHotfixInfoRequest
*/
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetHotfixInfo(ctx context.Context, agentId string) ApiApiControllersSyscollectorControllerGetHotfixInfoRequest {
	return ApiApiControllersSyscollectorControllerGetHotfixInfoRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetHotfixesInfo200Response
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetHotfixInfoExecute(r ApiApiControllersSyscollectorControllerGetHotfixInfoRequest) (*ApiControllersExperimentalControllerGetHotfixesInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetHotfixesInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyscollectorAPIService.ApiControllersSyscollectorControllerGetHotfixInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/syscollector/{agent_id}/hotfixes"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.agentId) < 3 {
		return localVarReturnValue, nil, reportError("agentId must have at least 3 elements")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.hotfix != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotfix", r.hotfix, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "form", "")
	} else {
		var defaultValue bool = false
		r.distinct = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest struct {
	ctx context.Context
	ApiService *SyscollectorAPIService
	agentId string
	pretty *bool
	waitForComplete *bool
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	iface *string
	proto *string
	address *string
	broadcast *string
	netmask *string
	q *string
	distinct *bool
}

// Show results in human-readable format
func (r ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest) Pretty(pretty bool) ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// First element to return in the collection
func (r ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest) Offset(offset int32) ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest) Limit(limit int32) ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest) Sort(sort string) ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest) Search(search string) ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest) Select_(select_ []string) ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest {
	r.select_ = &select_
	return r
}

// Filter by network interface
func (r ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest) Iface(iface string) ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest {
	r.iface = &iface
	return r
}

// Filter by IP protocol
func (r ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest) Proto(proto string) ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest {
	r.proto = &proto
	return r
}

// Filter by IP address
func (r ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest) Address(address string) ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest {
	r.address = &address
	return r
}

// Filter by broadcast direction
func (r ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest) Broadcast(broadcast string) ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest {
	r.broadcast = &broadcast
	return r
}

// Filter by netmask
func (r ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest) Netmask(netmask string) ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest {
	r.netmask = &netmask
	return r
}

// Query to filter results by. For example q&#x3D;&amp;quot;status&#x3D;active&amp;quot;
func (r ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest) Q(q string) ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest {
	r.q = &q
	return r
}

// Look for distinct values.
func (r ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest) Distinct(distinct bool) ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest {
	r.distinct = &distinct
	return r
}

func (r ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest) Execute() (*ApiControllersExperimentalControllerGetNetworkAddressInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersSyscollectorControllerGetNetworkAddressInfoExecute(r)
}

/*
ApiControllersSyscollectorControllerGetNetworkAddressInfo Get agent netaddr

Return the agent's network address info. This information include used IP protocol, interface, IP address  among others

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId Agent ID. All possible values from 000 onwards
 @return ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest
*/
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetNetworkAddressInfo(ctx context.Context, agentId string) ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest {
	return ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetNetworkAddressInfo200Response
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetNetworkAddressInfoExecute(r ApiApiControllersSyscollectorControllerGetNetworkAddressInfoRequest) (*ApiControllersExperimentalControllerGetNetworkAddressInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetNetworkAddressInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyscollectorAPIService.ApiControllersSyscollectorControllerGetNetworkAddressInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/syscollector/{agent_id}/netaddr"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.agentId) < 3 {
		return localVarReturnValue, nil, reportError("agentId must have at least 3 elements")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.iface != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "iface", r.iface, "form", "")
	}
	if r.proto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proto", r.proto, "form", "")
	}
	if r.address != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "address", r.address, "form", "")
	}
	if r.broadcast != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "broadcast", r.broadcast, "form", "")
	}
	if r.netmask != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "netmask", r.netmask, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "form", "")
	} else {
		var defaultValue bool = false
		r.distinct = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest struct {
	ctx context.Context
	ApiService *SyscollectorAPIService
	agentId string
	pretty *bool
	waitForComplete *bool
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	name *string
	adapter *string
	type_ *string
	state *string
	mtu *int32
	txPackets *int32
	rxPackets *int32
	txBytes *int32
	rxBytes *int32
	txErrors *int32
	rxErrors *int32
	txDropped *int32
	rxDropped *int32
	q *string
	distinct *bool
}

// Show results in human-readable format
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) Pretty(pretty bool) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// First element to return in the collection
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) Offset(offset int32) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) Limit(limit int32) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) Sort(sort string) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) Search(search string) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) Select_(select_ []string) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.select_ = &select_
	return r
}

// Filter by name
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) Name(name string) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.name = &name
	return r
}

// Filter by adapter
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) Adapter(adapter string) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.adapter = &adapter
	return r
}

// Type of interface
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) Type_(type_ string) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.type_ = &type_
	return r
}

// Filter by state
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) State(state string) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.state = &state
	return r
}

// Filter by mtu
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) Mtu(mtu int32) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.mtu = &mtu
	return r
}

// Filter by tx.packets
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) TxPackets(txPackets int32) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.txPackets = &txPackets
	return r
}

// Filter by rx.packets
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) RxPackets(rxPackets int32) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.rxPackets = &rxPackets
	return r
}

// Filter by tx.bytes
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) TxBytes(txBytes int32) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.txBytes = &txBytes
	return r
}

// Filter by rx.bytes
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) RxBytes(rxBytes int32) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.rxBytes = &rxBytes
	return r
}

// Filter by tx.errors
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) TxErrors(txErrors int32) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.txErrors = &txErrors
	return r
}

// Filter by rx.errors
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) RxErrors(rxErrors int32) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.rxErrors = &rxErrors
	return r
}

// Filter by tx.dropped
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) TxDropped(txDropped int32) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.txDropped = &txDropped
	return r
}

// Filter by rx.dropped
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) RxDropped(rxDropped int32) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.rxDropped = &rxDropped
	return r
}

// Query to filter results by. For example q&#x3D;&amp;quot;status&#x3D;active&amp;quot;
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) Q(q string) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.q = &q
	return r
}

// Look for distinct values.
func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) Distinct(distinct bool) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	r.distinct = &distinct
	return r
}

func (r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) Execute() (*ApiControllersExperimentalControllerGetNetworkInterfaceInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersSyscollectorControllerGetNetworkInterfaceInfoExecute(r)
}

/*
ApiControllersSyscollectorControllerGetNetworkInterfaceInfo Get agent netiface

Return the agent's network interface info. This information include rx, scan, tx info and some network information among others

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId Agent ID. All possible values from 000 onwards
 @return ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest
*/
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetNetworkInterfaceInfo(ctx context.Context, agentId string) ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest {
	return ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetNetworkInterfaceInfo200Response
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetNetworkInterfaceInfoExecute(r ApiApiControllersSyscollectorControllerGetNetworkInterfaceInfoRequest) (*ApiControllersExperimentalControllerGetNetworkInterfaceInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetNetworkInterfaceInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyscollectorAPIService.ApiControllersSyscollectorControllerGetNetworkInterfaceInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/syscollector/{agent_id}/netiface"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.agentId) < 3 {
		return localVarReturnValue, nil, reportError("agentId must have at least 3 elements")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.adapter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adapter", r.adapter, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.mtu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mtu", r.mtu, "form", "")
	}
	if r.txPackets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tx.packets", r.txPackets, "form", "")
	}
	if r.rxPackets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rx.packets", r.rxPackets, "form", "")
	}
	if r.txBytes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tx.bytes", r.txBytes, "form", "")
	}
	if r.rxBytes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rx.bytes", r.rxBytes, "form", "")
	}
	if r.txErrors != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tx.errors", r.txErrors, "form", "")
	}
	if r.rxErrors != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rx.errors", r.rxErrors, "form", "")
	}
	if r.txDropped != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tx.dropped", r.txDropped, "form", "")
	}
	if r.rxDropped != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rx.dropped", r.rxDropped, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "form", "")
	} else {
		var defaultValue bool = false
		r.distinct = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest struct {
	ctx context.Context
	ApiService *SyscollectorAPIService
	agentId string
	pretty *bool
	waitForComplete *bool
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	iface *string
	type_ *string
	gateway *string
	dhcp *DHCPStatus
	q *string
	distinct *bool
}

// Show results in human-readable format
func (r ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest) Pretty(pretty bool) ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// First element to return in the collection
func (r ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest) Offset(offset int32) ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest) Limit(limit int32) ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest) Sort(sort string) ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest) Search(search string) ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest) Select_(select_ []string) ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest {
	r.select_ = &select_
	return r
}

// Filter by network interface
func (r ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest) Iface(iface string) ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest {
	r.iface = &iface
	return r
}

// Type of network
func (r ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest) Type_(type_ string) ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest {
	r.type_ = &type_
	return r
}

// Filter by network gateway
func (r ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest) Gateway(gateway string) ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest {
	r.gateway = &gateway
	return r
}

// Filter by network dhcp (enabled or disabled)
func (r ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest) Dhcp(dhcp DHCPStatus) ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest {
	r.dhcp = &dhcp
	return r
}

// Query to filter results by. For example q&#x3D;&amp;quot;status&#x3D;active&amp;quot;
func (r ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest) Q(q string) ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest {
	r.q = &q
	return r
}

// Look for distinct values.
func (r ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest) Distinct(distinct bool) ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest {
	r.distinct = &distinct
	return r
}

func (r ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest) Execute() (*ApiControllersExperimentalControllerGetNetworkProtocolInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersSyscollectorControllerGetNetworkProtocolInfoExecute(r)
}

/*
ApiControllersSyscollectorControllerGetNetworkProtocolInfo Get agent netproto

Return the agent's routing configuration for each network interface

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId Agent ID. All possible values from 000 onwards
 @return ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest
*/
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetNetworkProtocolInfo(ctx context.Context, agentId string) ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest {
	return ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetNetworkProtocolInfo200Response
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetNetworkProtocolInfoExecute(r ApiApiControllersSyscollectorControllerGetNetworkProtocolInfoRequest) (*ApiControllersExperimentalControllerGetNetworkProtocolInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetNetworkProtocolInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyscollectorAPIService.ApiControllersSyscollectorControllerGetNetworkProtocolInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/syscollector/{agent_id}/netproto"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.agentId) < 3 {
		return localVarReturnValue, nil, reportError("agentId must have at least 3 elements")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.iface != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "iface", r.iface, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.gateway != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gateway", r.gateway, "form", "")
	}
	if r.dhcp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dhcp", r.dhcp, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "form", "")
	} else {
		var defaultValue bool = false
		r.distinct = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersSyscollectorControllerGetOsInfoRequest struct {
	ctx context.Context
	ApiService *SyscollectorAPIService
	agentId string
	pretty *bool
	waitForComplete *bool
	select_ *[]string
}

// Show results in human-readable format
func (r ApiApiControllersSyscollectorControllerGetOsInfoRequest) Pretty(pretty bool) ApiApiControllersSyscollectorControllerGetOsInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersSyscollectorControllerGetOsInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersSyscollectorControllerGetOsInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscollectorControllerGetOsInfoRequest) Select_(select_ []string) ApiApiControllersSyscollectorControllerGetOsInfoRequest {
	r.select_ = &select_
	return r
}

func (r ApiApiControllersSyscollectorControllerGetOsInfoRequest) Execute() (*ApiControllersExperimentalControllerGetOsInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersSyscollectorControllerGetOsInfoExecute(r)
}

/*
ApiControllersSyscollectorControllerGetOsInfo Get agent OS

Return the agent's OS info. This information include os information, architecture information among others of all agents

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId Agent ID. All possible values from 000 onwards
 @return ApiApiControllersSyscollectorControllerGetOsInfoRequest
*/
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetOsInfo(ctx context.Context, agentId string) ApiApiControllersSyscollectorControllerGetOsInfoRequest {
	return ApiApiControllersSyscollectorControllerGetOsInfoRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetOsInfo200Response
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetOsInfoExecute(r ApiApiControllersSyscollectorControllerGetOsInfoRequest) (*ApiControllersExperimentalControllerGetOsInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetOsInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyscollectorAPIService.ApiControllersSyscollectorControllerGetOsInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/syscollector/{agent_id}/os"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.agentId) < 3 {
		return localVarReturnValue, nil, reportError("agentId must have at least 3 elements")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersSyscollectorControllerGetPackagesInfoRequest struct {
	ctx context.Context
	ApiService *SyscollectorAPIService
	agentId string
	pretty *bool
	waitForComplete *bool
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	vendor *string
	name *string
	architecture *string
	format *string
	version *string
	q *string
	distinct *bool
}

// Show results in human-readable format
func (r ApiApiControllersSyscollectorControllerGetPackagesInfoRequest) Pretty(pretty bool) ApiApiControllersSyscollectorControllerGetPackagesInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersSyscollectorControllerGetPackagesInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersSyscollectorControllerGetPackagesInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// First element to return in the collection
func (r ApiApiControllersSyscollectorControllerGetPackagesInfoRequest) Offset(offset int32) ApiApiControllersSyscollectorControllerGetPackagesInfoRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersSyscollectorControllerGetPackagesInfoRequest) Limit(limit int32) ApiApiControllersSyscollectorControllerGetPackagesInfoRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscollectorControllerGetPackagesInfoRequest) Sort(sort string) ApiApiControllersSyscollectorControllerGetPackagesInfoRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersSyscollectorControllerGetPackagesInfoRequest) Search(search string) ApiApiControllersSyscollectorControllerGetPackagesInfoRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscollectorControllerGetPackagesInfoRequest) Select_(select_ []string) ApiApiControllersSyscollectorControllerGetPackagesInfoRequest {
	r.select_ = &select_
	return r
}

// Filter by vendor
func (r ApiApiControllersSyscollectorControllerGetPackagesInfoRequest) Vendor(vendor string) ApiApiControllersSyscollectorControllerGetPackagesInfoRequest {
	r.vendor = &vendor
	return r
}

// Filter by name
func (r ApiApiControllersSyscollectorControllerGetPackagesInfoRequest) Name(name string) ApiApiControllersSyscollectorControllerGetPackagesInfoRequest {
	r.name = &name
	return r
}

// Filter by architecture
func (r ApiApiControllersSyscollectorControllerGetPackagesInfoRequest) Architecture(architecture string) ApiApiControllersSyscollectorControllerGetPackagesInfoRequest {
	r.architecture = &architecture
	return r
}

// Filter by file format. For example &#39;deb&#39; will output deb files
func (r ApiApiControllersSyscollectorControllerGetPackagesInfoRequest) Format(format string) ApiApiControllersSyscollectorControllerGetPackagesInfoRequest {
	r.format = &format
	return r
}

// Filter by package version
func (r ApiApiControllersSyscollectorControllerGetPackagesInfoRequest) Version(version string) ApiApiControllersSyscollectorControllerGetPackagesInfoRequest {
	r.version = &version
	return r
}

// Query to filter results by. For example q&#x3D;&amp;quot;status&#x3D;active&amp;quot;
func (r ApiApiControllersSyscollectorControllerGetPackagesInfoRequest) Q(q string) ApiApiControllersSyscollectorControllerGetPackagesInfoRequest {
	r.q = &q
	return r
}

// Look for distinct values.
func (r ApiApiControllersSyscollectorControllerGetPackagesInfoRequest) Distinct(distinct bool) ApiApiControllersSyscollectorControllerGetPackagesInfoRequest {
	r.distinct = &distinct
	return r
}

func (r ApiApiControllersSyscollectorControllerGetPackagesInfoRequest) Execute() (*ApiControllersExperimentalControllerGetPackagesInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersSyscollectorControllerGetPackagesInfoExecute(r)
}

/*
ApiControllersSyscollectorControllerGetPackagesInfo Get agent packages

Return the agent's packages info. This information include name, section, size, priority information of all packages among others

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId Agent ID. All possible values from 000 onwards
 @return ApiApiControllersSyscollectorControllerGetPackagesInfoRequest
*/
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetPackagesInfo(ctx context.Context, agentId string) ApiApiControllersSyscollectorControllerGetPackagesInfoRequest {
	return ApiApiControllersSyscollectorControllerGetPackagesInfoRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetPackagesInfo200Response
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetPackagesInfoExecute(r ApiApiControllersSyscollectorControllerGetPackagesInfoRequest) (*ApiControllersExperimentalControllerGetPackagesInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetPackagesInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyscollectorAPIService.ApiControllersSyscollectorControllerGetPackagesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/syscollector/{agent_id}/packages"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.agentId) < 3 {
		return localVarReturnValue, nil, reportError("agentId must have at least 3 elements")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.vendor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vendor", r.vendor, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.architecture != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "architecture", r.architecture, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "form", "")
	} else {
		var defaultValue bool = false
		r.distinct = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersSyscollectorControllerGetPortsInfoRequest struct {
	ctx context.Context
	ApiService *SyscollectorAPIService
	agentId string
	pretty *bool
	waitForComplete *bool
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	pid *string
	protocol *string
	localIp *string
	localPort *string
	remoteIp *string
	txQueue *string
	state *string
	process *string
	q *string
	distinct *bool
}

// Show results in human-readable format
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) Pretty(pretty bool) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// First element to return in the collection
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) Offset(offset int32) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) Limit(limit int32) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) Sort(sort string) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) Search(search string) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) Select_(select_ []string) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.select_ = &select_
	return r
}

// Filter by pid
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) Pid(pid string) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.pid = &pid
	return r
}

// Filter by protocol
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) Protocol(protocol string) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.protocol = &protocol
	return r
}

// Filter by Local IP
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) LocalIp(localIp string) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.localIp = &localIp
	return r
}

// Filter by Local Port
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) LocalPort(localPort string) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.localPort = &localPort
	return r
}

// Filter by Remote IP
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) RemoteIp(remoteIp string) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.remoteIp = &remoteIp
	return r
}

// Filter by tx_queue
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) TxQueue(txQueue string) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.txQueue = &txQueue
	return r
}

// Filter by state
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) State(state string) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.state = &state
	return r
}

// Filter by process name
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) Process(process string) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.process = &process
	return r
}

// Query to filter results by. For example q&#x3D;&amp;quot;status&#x3D;active&amp;quot;
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) Q(q string) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.q = &q
	return r
}

// Look for distinct values.
func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) Distinct(distinct bool) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	r.distinct = &distinct
	return r
}

func (r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) Execute() (*ApiControllersExperimentalControllerGetPortsInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersSyscollectorControllerGetPortsInfoExecute(r)
}

/*
ApiControllersSyscollectorControllerGetPortsInfo Get agent ports

Return the agent's ports info. This information include local IP, Remote IP, protocol information among others

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId Agent ID. All possible values from 000 onwards
 @return ApiApiControllersSyscollectorControllerGetPortsInfoRequest
*/
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetPortsInfo(ctx context.Context, agentId string) ApiApiControllersSyscollectorControllerGetPortsInfoRequest {
	return ApiApiControllersSyscollectorControllerGetPortsInfoRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetPortsInfo200Response
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetPortsInfoExecute(r ApiApiControllersSyscollectorControllerGetPortsInfoRequest) (*ApiControllersExperimentalControllerGetPortsInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetPortsInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyscollectorAPIService.ApiControllersSyscollectorControllerGetPortsInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/syscollector/{agent_id}/ports"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.agentId) < 3 {
		return localVarReturnValue, nil, reportError("agentId must have at least 3 elements")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.pid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pid", r.pid, "form", "")
	}
	if r.protocol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "protocol", r.protocol, "form", "")
	}
	if r.localIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "local.ip", r.localIp, "form", "")
	}
	if r.localPort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "local.port", r.localPort, "form", "")
	}
	if r.remoteIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "remote.ip", r.remoteIp, "form", "")
	}
	if r.txQueue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tx_queue", r.txQueue, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.process != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "process", r.process, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "form", "")
	} else {
		var defaultValue bool = false
		r.distinct = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersSyscollectorControllerGetProcessesInfoRequest struct {
	ctx context.Context
	ApiService *SyscollectorAPIService
	agentId string
	pretty *bool
	waitForComplete *bool
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	pid *string
	state *string
	ppid *string
	egroup *string
	euser *string
	fgroup *string
	name *string
	nlwp *string
	pgrp *string
	priority *string
	rgroup *string
	ruser *string
	sgroup *string
	suser *string
	q *string
	distinct *bool
}

// Show results in human-readable format
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Pretty(pretty bool) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// First element to return in the collection
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Offset(offset int32) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Limit(limit int32) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Sort(sort string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Search(search string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Select_(select_ []string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.select_ = &select_
	return r
}

// Filter by process pid
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Pid(pid string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.pid = &pid
	return r
}

// Filter by process state
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) State(state string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.state = &state
	return r
}

// Filter by process parent pid
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Ppid(ppid string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.ppid = &ppid
	return r
}

// Filter by process egroup
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Egroup(egroup string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.egroup = &egroup
	return r
}

// Filter by process euser
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Euser(euser string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.euser = &euser
	return r
}

// Filter by process fgroup
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Fgroup(fgroup string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.fgroup = &fgroup
	return r
}

// Filter by process name
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Name(name string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.name = &name
	return r
}

// Filter by process nlwp
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Nlwp(nlwp string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.nlwp = &nlwp
	return r
}

// Filter by process pgrp
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Pgrp(pgrp string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.pgrp = &pgrp
	return r
}

// Filter by process priority
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Priority(priority string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.priority = &priority
	return r
}

// Filter by process rgroup
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Rgroup(rgroup string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.rgroup = &rgroup
	return r
}

// Filter by process ruser
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Ruser(ruser string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.ruser = &ruser
	return r
}

// Filter by process sgroup
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Sgroup(sgroup string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.sgroup = &sgroup
	return r
}

// Filter by process suser
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Suser(suser string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.suser = &suser
	return r
}

// Query to filter results by. For example q&#x3D;&amp;quot;status&#x3D;active&amp;quot;
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Q(q string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.q = &q
	return r
}

// Look for distinct values.
func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Distinct(distinct bool) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	r.distinct = &distinct
	return r
}

func (r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) Execute() (*ApiControllersExperimentalControllerGetProcessesInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersSyscollectorControllerGetProcessesInfoExecute(r)
}

/*
ApiControllersSyscollectorControllerGetProcessesInfo Get agent processes

Return the agent's processes info

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId Agent ID. All possible values from 000 onwards
 @return ApiApiControllersSyscollectorControllerGetProcessesInfoRequest
*/
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetProcessesInfo(ctx context.Context, agentId string) ApiApiControllersSyscollectorControllerGetProcessesInfoRequest {
	return ApiApiControllersSyscollectorControllerGetProcessesInfoRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetProcessesInfo200Response
func (a *SyscollectorAPIService) ApiControllersSyscollectorControllerGetProcessesInfoExecute(r ApiApiControllersSyscollectorControllerGetProcessesInfoRequest) (*ApiControllersExperimentalControllerGetProcessesInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetProcessesInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyscollectorAPIService.ApiControllersSyscollectorControllerGetProcessesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/syscollector/{agent_id}/processes"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.agentId) < 3 {
		return localVarReturnValue, nil, reportError("agentId must have at least 3 elements")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.pid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pid", r.pid, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.ppid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ppid", r.ppid, "form", "")
	}
	if r.egroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "egroup", r.egroup, "form", "")
	}
	if r.euser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "euser", r.euser, "form", "")
	}
	if r.fgroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fgroup", r.fgroup, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.nlwp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nlwp", r.nlwp, "form", "")
	}
	if r.pgrp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pgrp", r.pgrp, "form", "")
	}
	if r.priority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priority", r.priority, "form", "")
	}
	if r.rgroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rgroup", r.rgroup, "form", "")
	}
	if r.ruser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ruser", r.ruser, "form", "")
	}
	if r.sgroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sgroup", r.sgroup, "form", "")
	}
	if r.suser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "suser", r.suser, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "form", "")
	} else {
		var defaultValue bool = false
		r.distinct = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
