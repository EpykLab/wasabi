/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActiveResponseBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveResponseBody{}

// ActiveResponseBody struct for ActiveResponseBody
type ActiveResponseBody struct {
	// Command arguments
	Arguments []string `json:"arguments,omitempty"`
	// Command running in the agent. If this value starts with `!`, then it refers to a script name instead of a command name
	Command string `json:"command"`
	Alert *ActiveResponseBodyAlert `json:"alert,omitempty"`
}

type _ActiveResponseBody ActiveResponseBody

// NewActiveResponseBody instantiates a new ActiveResponseBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveResponseBody(command string) *ActiveResponseBody {
	this := ActiveResponseBody{}
	this.Command = command
	return &this
}

// NewActiveResponseBodyWithDefaults instantiates a new ActiveResponseBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveResponseBodyWithDefaults() *ActiveResponseBody {
	this := ActiveResponseBody{}
	return &this
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *ActiveResponseBody) GetArguments() []string {
	if o == nil || IsNil(o.Arguments) {
		var ret []string
		return ret
	}
	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveResponseBody) GetArgumentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Arguments) {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *ActiveResponseBody) HasArguments() bool {
	if o != nil && !IsNil(o.Arguments) {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []string and assigns it to the Arguments field.
func (o *ActiveResponseBody) SetArguments(v []string) {
	o.Arguments = v
}

// GetCommand returns the Command field value
func (o *ActiveResponseBody) GetCommand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *ActiveResponseBody) GetCommandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Command, true
}

// SetCommand sets field value
func (o *ActiveResponseBody) SetCommand(v string) {
	o.Command = v
}

// GetAlert returns the Alert field value if set, zero value otherwise.
func (o *ActiveResponseBody) GetAlert() ActiveResponseBodyAlert {
	if o == nil || IsNil(o.Alert) {
		var ret ActiveResponseBodyAlert
		return ret
	}
	return *o.Alert
}

// GetAlertOk returns a tuple with the Alert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveResponseBody) GetAlertOk() (*ActiveResponseBodyAlert, bool) {
	if o == nil || IsNil(o.Alert) {
		return nil, false
	}
	return o.Alert, true
}

// HasAlert returns a boolean if a field has been set.
func (o *ActiveResponseBody) HasAlert() bool {
	if o != nil && !IsNil(o.Alert) {
		return true
	}

	return false
}

// SetAlert gets a reference to the given ActiveResponseBodyAlert and assigns it to the Alert field.
func (o *ActiveResponseBody) SetAlert(v ActiveResponseBodyAlert) {
	o.Alert = &v
}

func (o ActiveResponseBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveResponseBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Arguments) {
		toSerialize["arguments"] = o.Arguments
	}
	toSerialize["command"] = o.Command
	if !IsNil(o.Alert) {
		toSerialize["alert"] = o.Alert
	}
	return toSerialize, nil
}

func (o *ActiveResponseBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"command",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActiveResponseBody := _ActiveResponseBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActiveResponseBody)

	if err != nil {
		return err
	}

	*o = ActiveResponseBody(varActiveResponseBody)

	return err
}

type NullableActiveResponseBody struct {
	value *ActiveResponseBody
	isSet bool
}

func (v NullableActiveResponseBody) Get() *ActiveResponseBody {
	return v.value
}

func (v *NullableActiveResponseBody) Set(val *ActiveResponseBody) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveResponseBody) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveResponseBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveResponseBody(val *ActiveResponseBody) *NullableActiveResponseBody {
	return &NullableActiveResponseBody{value: val, isSet: true}
}

func (v NullableActiveResponseBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveResponseBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


