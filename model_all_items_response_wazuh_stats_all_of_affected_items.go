/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)


// AllItemsResponseWazuhStatsAllOfAffectedItems struct for AllItemsResponseWazuhStatsAllOfAffectedItems
type AllItemsResponseWazuhStatsAllOfAffectedItems struct {
	WazuhAnalysisdStats *WazuhAnalysisdStats
	WazuhHourlyStats *WazuhHourlyStats
	WazuhRemotedStats *WazuhRemotedStats
	WazuhWeeklyStats *WazuhWeeklyStats
	ArrayOfWazuhStatsInner *[]WazuhStatsInner
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *AllItemsResponseWazuhStatsAllOfAffectedItems) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into WazuhAnalysisdStats
	err = json.Unmarshal(data, &dst.WazuhAnalysisdStats);
	if err == nil {
		jsonWazuhAnalysisdStats, _ := json.Marshal(dst.WazuhAnalysisdStats)
		if string(jsonWazuhAnalysisdStats) == "{}" { // empty struct
			dst.WazuhAnalysisdStats = nil
		} else {
			return nil // data stored in dst.WazuhAnalysisdStats, return on the first match
		}
	} else {
		dst.WazuhAnalysisdStats = nil
	}

	// try to unmarshal JSON data into WazuhHourlyStats
	err = json.Unmarshal(data, &dst.WazuhHourlyStats);
	if err == nil {
		jsonWazuhHourlyStats, _ := json.Marshal(dst.WazuhHourlyStats)
		if string(jsonWazuhHourlyStats) == "{}" { // empty struct
			dst.WazuhHourlyStats = nil
		} else {
			return nil // data stored in dst.WazuhHourlyStats, return on the first match
		}
	} else {
		dst.WazuhHourlyStats = nil
	}

	// try to unmarshal JSON data into WazuhRemotedStats
	err = json.Unmarshal(data, &dst.WazuhRemotedStats);
	if err == nil {
		jsonWazuhRemotedStats, _ := json.Marshal(dst.WazuhRemotedStats)
		if string(jsonWazuhRemotedStats) == "{}" { // empty struct
			dst.WazuhRemotedStats = nil
		} else {
			return nil // data stored in dst.WazuhRemotedStats, return on the first match
		}
	} else {
		dst.WazuhRemotedStats = nil
	}

	// try to unmarshal JSON data into WazuhWeeklyStats
	err = json.Unmarshal(data, &dst.WazuhWeeklyStats);
	if err == nil {
		jsonWazuhWeeklyStats, _ := json.Marshal(dst.WazuhWeeklyStats)
		if string(jsonWazuhWeeklyStats) == "{}" { // empty struct
			dst.WazuhWeeklyStats = nil
		} else {
			return nil // data stored in dst.WazuhWeeklyStats, return on the first match
		}
	} else {
		dst.WazuhWeeklyStats = nil
	}

	// try to unmarshal JSON data into ArrayOfWazuhStatsInner
	err = json.Unmarshal(data, &dst.ArrayOfWazuhStatsInner);
	if err == nil {
		jsonArrayOfWazuhStatsInner, _ := json.Marshal(dst.ArrayOfWazuhStatsInner)
		if string(jsonArrayOfWazuhStatsInner) == "{}" { // empty struct
			dst.ArrayOfWazuhStatsInner = nil
		} else {
			return nil // data stored in dst.ArrayOfWazuhStatsInner, return on the first match
		}
	} else {
		dst.ArrayOfWazuhStatsInner = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(AllItemsResponseWazuhStatsAllOfAffectedItems)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AllItemsResponseWazuhStatsAllOfAffectedItems) MarshalJSON() ([]byte, error) {
	if src.WazuhAnalysisdStats != nil {
		return json.Marshal(&src.WazuhAnalysisdStats)
	}

	if src.WazuhHourlyStats != nil {
		return json.Marshal(&src.WazuhHourlyStats)
	}

	if src.WazuhRemotedStats != nil {
		return json.Marshal(&src.WazuhRemotedStats)
	}

	if src.WazuhWeeklyStats != nil {
		return json.Marshal(&src.WazuhWeeklyStats)
	}

	if src.ArrayOfWazuhStatsInner != nil {
		return json.Marshal(&src.ArrayOfWazuhStatsInner)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableAllItemsResponseWazuhStatsAllOfAffectedItems struct {
	value *AllItemsResponseWazuhStatsAllOfAffectedItems
	isSet bool
}

func (v NullableAllItemsResponseWazuhStatsAllOfAffectedItems) Get() *AllItemsResponseWazuhStatsAllOfAffectedItems {
	return v.value
}

func (v *NullableAllItemsResponseWazuhStatsAllOfAffectedItems) Set(val *AllItemsResponseWazuhStatsAllOfAffectedItems) {
	v.value = val
	v.isSet = true
}

func (v NullableAllItemsResponseWazuhStatsAllOfAffectedItems) IsSet() bool {
	return v.isSet
}

func (v *NullableAllItemsResponseWazuhStatsAllOfAffectedItems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllItemsResponseWazuhStatsAllOfAffectedItems(val *AllItemsResponseWazuhStatsAllOfAffectedItems) *NullableAllItemsResponseWazuhStatsAllOfAffectedItems {
	return &NullableAllItemsResponseWazuhStatsAllOfAffectedItems{value: val, isSet: true}
}

func (v NullableAllItemsResponseWazuhStatsAllOfAffectedItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllItemsResponseWazuhStatsAllOfAffectedItems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


