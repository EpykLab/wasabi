/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// SyscheckAPIService SyscheckAPI service
type SyscheckAPIService service

type ApiApiControllersSyscheckControllerDeleteSyscheckAgentRequest struct {
	ctx context.Context
	ApiService *SyscheckAPIService
	agentId string
	pretty *bool
	waitForComplete *bool
}

// Show results in human-readable format
func (r ApiApiControllersSyscheckControllerDeleteSyscheckAgentRequest) Pretty(pretty bool) ApiApiControllersSyscheckControllerDeleteSyscheckAgentRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersSyscheckControllerDeleteSyscheckAgentRequest) WaitForComplete(waitForComplete bool) ApiApiControllersSyscheckControllerDeleteSyscheckAgentRequest {
	r.waitForComplete = &waitForComplete
	return r
}

func (r ApiApiControllersSyscheckControllerDeleteSyscheckAgentRequest) Execute() (*ApiControllersMitreControllerGetGroups200Response, *http.Response, error) {
	return r.ApiService.ApiControllersSyscheckControllerDeleteSyscheckAgentExecute(r)
}

/*
ApiControllersSyscheckControllerDeleteSyscheckAgent Clear results

Clear file integrity monitoring scan results for a specified agent. Only available for agents < 3.12.0, it doesn't apply for more recent ones

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId Agent ID. All possible values from 000 onwards
 @return ApiApiControllersSyscheckControllerDeleteSyscheckAgentRequest
*/
func (a *SyscheckAPIService) ApiControllersSyscheckControllerDeleteSyscheckAgent(ctx context.Context, agentId string) ApiApiControllersSyscheckControllerDeleteSyscheckAgentRequest {
	return ApiApiControllersSyscheckControllerDeleteSyscheckAgentRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return ApiControllersMitreControllerGetGroups200Response
func (a *SyscheckAPIService) ApiControllersSyscheckControllerDeleteSyscheckAgentExecute(r ApiApiControllersSyscheckControllerDeleteSyscheckAgentRequest) (*ApiControllersMitreControllerGetGroups200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersMitreControllerGetGroups200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyscheckAPIService.ApiControllersSyscheckControllerDeleteSyscheckAgent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/syscheck/{agent_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.agentId) < 3 {
		return localVarReturnValue, nil, reportError("agentId must have at least 3 elements")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersSyscheckControllerGetLastScanAgentRequest struct {
	ctx context.Context
	ApiService *SyscheckAPIService
	agentId string
	pretty *bool
	waitForComplete *bool
}

// Show results in human-readable format
func (r ApiApiControllersSyscheckControllerGetLastScanAgentRequest) Pretty(pretty bool) ApiApiControllersSyscheckControllerGetLastScanAgentRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersSyscheckControllerGetLastScanAgentRequest) WaitForComplete(waitForComplete bool) ApiApiControllersSyscheckControllerGetLastScanAgentRequest {
	r.waitForComplete = &waitForComplete
	return r
}

func (r ApiApiControllersSyscheckControllerGetLastScanAgentRequest) Execute() (*ApiControllersSyscheckControllerGetLastScanAgent200Response, *http.Response, error) {
	return r.ApiService.ApiControllersSyscheckControllerGetLastScanAgentExecute(r)
}

/*
ApiControllersSyscheckControllerGetLastScanAgent Get last scan datetime

Return when the last syscheck scan started and ended. If the scan is still in progress the end date will be unknown

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId Agent ID. All possible values from 000 onwards
 @return ApiApiControllersSyscheckControllerGetLastScanAgentRequest
*/
func (a *SyscheckAPIService) ApiControllersSyscheckControllerGetLastScanAgent(ctx context.Context, agentId string) ApiApiControllersSyscheckControllerGetLastScanAgentRequest {
	return ApiApiControllersSyscheckControllerGetLastScanAgentRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return ApiControllersSyscheckControllerGetLastScanAgent200Response
func (a *SyscheckAPIService) ApiControllersSyscheckControllerGetLastScanAgentExecute(r ApiApiControllersSyscheckControllerGetLastScanAgentRequest) (*ApiControllersSyscheckControllerGetLastScanAgent200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersSyscheckControllerGetLastScanAgent200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyscheckAPIService.ApiControllersSyscheckControllerGetLastScanAgent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/syscheck/{agent_id}/last_scan"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.agentId) < 3 {
		return localVarReturnValue, nil, reportError("agentId must have at least 3 elements")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersSyscheckControllerGetSyscheckAgentRequest struct {
	ctx context.Context
	ApiService *SyscheckAPIService
	agentId string
	pretty *bool
	waitForComplete *bool
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	file *string
	arch *string
	valueName *string
	valueType *string
	type_ *string
	summary *bool
	md5 *string
	sha1 *string
	sha256 *string
	hash *string
	distinct *bool
	q *string
}

// Show results in human-readable format
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) Pretty(pretty bool) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) WaitForComplete(waitForComplete bool) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// First element to return in the collection
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) Offset(offset int32) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) Limit(limit int32) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) Sort(sort string) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) Search(search string) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) Select_(select_ []string) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.select_ = &select_
	return r
}

// Filter by full path
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) File(file string) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.file = &file
	return r
}

// Filter by architecture
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) Arch(arch string) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.arch = &arch
	return r
}

// Filter by value name
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) ValueName(valueName string) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.valueName = &valueName
	return r
}

// Filter by value type
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) ValueType(valueType string) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.valueType = &valueType
	return r
}

// Filter by file type. Registry_key and registry_value types are only available in Windows agents
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) Type_(type_ string) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.type_ = &type_
	return r
}

// Return a summary grouping by filename
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) Summary(summary bool) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.summary = &summary
	return r
}

// Filter files with the specified MD5 checksum
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) Md5(md5 string) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.md5 = &md5
	return r
}

// Filter files with the specified SHA1 checksum
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) Sha1(sha1 string) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.sha1 = &sha1
	return r
}

// Filter files with the specified SHA256 checksum
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) Sha256(sha256 string) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.sha256 = &sha256
	return r
}

// Filter files with the specified hash (md5, sha256 or sha1)
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) Hash(hash string) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.hash = &hash
	return r
}

// Look for distinct values.
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) Distinct(distinct bool) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.distinct = &distinct
	return r
}

// Query to filter results by. For example q&#x3D;&amp;quot;status&#x3D;active&amp;quot;
func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) Q(q string) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	r.q = &q
	return r
}

func (r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) Execute() (*ApiControllersSyscheckControllerGetSyscheckAgent200Response, *http.Response, error) {
	return r.ApiService.ApiControllersSyscheckControllerGetSyscheckAgentExecute(r)
}

/*
ApiControllersSyscheckControllerGetSyscheckAgent Get results

Return FIM findings in the specified agent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId Agent ID. All possible values from 000 onwards
 @return ApiApiControllersSyscheckControllerGetSyscheckAgentRequest
*/
func (a *SyscheckAPIService) ApiControllersSyscheckControllerGetSyscheckAgent(ctx context.Context, agentId string) ApiApiControllersSyscheckControllerGetSyscheckAgentRequest {
	return ApiApiControllersSyscheckControllerGetSyscheckAgentRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return ApiControllersSyscheckControllerGetSyscheckAgent200Response
func (a *SyscheckAPIService) ApiControllersSyscheckControllerGetSyscheckAgentExecute(r ApiApiControllersSyscheckControllerGetSyscheckAgentRequest) (*ApiControllersSyscheckControllerGetSyscheckAgent200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersSyscheckControllerGetSyscheckAgent200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyscheckAPIService.ApiControllersSyscheckControllerGetSyscheckAgent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/syscheck/{agent_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.agentId) < 3 {
		return localVarReturnValue, nil, reportError("agentId must have at least 3 elements")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.file != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file", r.file, "form", "")
	}
	if r.arch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arch", r.arch, "form", "")
	}
	if r.valueName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value.name", r.valueName, "form", "")
	}
	if r.valueType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "value.type", r.valueType, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.summary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "summary", r.summary, "form", "")
	} else {
		var defaultValue bool = false
		r.summary = &defaultValue
	}
	if r.md5 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "md5", r.md5, "form", "")
	}
	if r.sha1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sha1", r.sha1, "form", "")
	}
	if r.sha256 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sha256", r.sha256, "form", "")
	}
	if r.hash != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hash", r.hash, "form", "")
	}
	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "form", "")
	} else {
		var defaultValue bool = false
		r.distinct = &defaultValue
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersSyscheckControllerPutSyscheckRequest struct {
	ctx context.Context
	ApiService *SyscheckAPIService
	agentsList *[]string
	pretty *bool
	waitForComplete *bool
}

// List of agent IDs (separated by comma), all agents selected by default if not specified
func (r ApiApiControllersSyscheckControllerPutSyscheckRequest) AgentsList(agentsList []string) ApiApiControllersSyscheckControllerPutSyscheckRequest {
	r.agentsList = &agentsList
	return r
}

// Show results in human-readable format
func (r ApiApiControllersSyscheckControllerPutSyscheckRequest) Pretty(pretty bool) ApiApiControllersSyscheckControllerPutSyscheckRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersSyscheckControllerPutSyscheckRequest) WaitForComplete(waitForComplete bool) ApiApiControllersSyscheckControllerPutSyscheckRequest {
	r.waitForComplete = &waitForComplete
	return r
}

func (r ApiApiControllersSyscheckControllerPutSyscheckRequest) Execute() (*ApiControllersAgentControllerRestartAgentsByNode200Response, *http.Response, error) {
	return r.ApiService.ApiControllersSyscheckControllerPutSyscheckExecute(r)
}

/*
ApiControllersSyscheckControllerPutSyscheck Run scan

Run FIM scan in all agents

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiControllersSyscheckControllerPutSyscheckRequest
*/
func (a *SyscheckAPIService) ApiControllersSyscheckControllerPutSyscheck(ctx context.Context) ApiApiControllersSyscheckControllerPutSyscheckRequest {
	return ApiApiControllersSyscheckControllerPutSyscheckRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiControllersAgentControllerRestartAgentsByNode200Response
func (a *SyscheckAPIService) ApiControllersSyscheckControllerPutSyscheckExecute(r ApiApiControllersSyscheckControllerPutSyscheckRequest) (*ApiControllersAgentControllerRestartAgentsByNode200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersAgentControllerRestartAgentsByNode200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyscheckAPIService.ApiControllersSyscheckControllerPutSyscheck")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/syscheck"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.agentsList != nil {
		t := *r.agentsList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", t, "form", "multi")
		}
	}
	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
