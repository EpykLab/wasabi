/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// TasksAPIService TasksAPI service
type TasksAPIService service

type ApiApiControllersTaskControllerGetTasksStatusRequest struct {
	ctx context.Context
	ApiService *TasksAPIService
	pretty *bool
	waitForComplete *bool
	offset *int32
	limit *int32
	q *string
	search *string
	select_ *[]string
	sort *string
	agentsList *[]string
	tasksList *[]string
	command *string
	node *string
	module *string
	status *string
}

// Show results in human-readable format
func (r ApiApiControllersTaskControllerGetTasksStatusRequest) Pretty(pretty bool) ApiApiControllersTaskControllerGetTasksStatusRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersTaskControllerGetTasksStatusRequest) WaitForComplete(waitForComplete bool) ApiApiControllersTaskControllerGetTasksStatusRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// First element to return in the collection
func (r ApiApiControllersTaskControllerGetTasksStatusRequest) Offset(offset int32) ApiApiControllersTaskControllerGetTasksStatusRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersTaskControllerGetTasksStatusRequest) Limit(limit int32) ApiApiControllersTaskControllerGetTasksStatusRequest {
	r.limit = &limit
	return r
}

// Query to filter results by. For example q&#x3D;&amp;quot;status&#x3D;active&amp;quot;
func (r ApiApiControllersTaskControllerGetTasksStatusRequest) Q(q string) ApiApiControllersTaskControllerGetTasksStatusRequest {
	r.q = &q
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersTaskControllerGetTasksStatusRequest) Search(search string) ApiApiControllersTaskControllerGetTasksStatusRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersTaskControllerGetTasksStatusRequest) Select_(select_ []string) ApiApiControllersTaskControllerGetTasksStatusRequest {
	r.select_ = &select_
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersTaskControllerGetTasksStatusRequest) Sort(sort string) ApiApiControllersTaskControllerGetTasksStatusRequest {
	r.sort = &sort
	return r
}

// List of agent IDs (separated by comma), all agents selected by default if not specified
func (r ApiApiControllersTaskControllerGetTasksStatusRequest) AgentsList(agentsList []string) ApiApiControllersTaskControllerGetTasksStatusRequest {
	r.agentsList = &agentsList
	return r
}

// List of task IDs (separated by comma)
func (r ApiApiControllersTaskControllerGetTasksStatusRequest) TasksList(tasksList []string) ApiApiControllersTaskControllerGetTasksStatusRequest {
	r.tasksList = &tasksList
	return r
}

// Filter by command
func (r ApiApiControllersTaskControllerGetTasksStatusRequest) Command(command string) ApiApiControllersTaskControllerGetTasksStatusRequest {
	r.command = &command
	return r
}

// Show results filtered by node
func (r ApiApiControllersTaskControllerGetTasksStatusRequest) Node(node string) ApiApiControllersTaskControllerGetTasksStatusRequest {
	r.node = &node
	return r
}

// Show results filtered by module
func (r ApiApiControllersTaskControllerGetTasksStatusRequest) Module(module string) ApiApiControllersTaskControllerGetTasksStatusRequest {
	r.module = &module
	return r
}

// Filter by status
func (r ApiApiControllersTaskControllerGetTasksStatusRequest) Status(status string) ApiApiControllersTaskControllerGetTasksStatusRequest {
	r.status = &status
	return r
}

func (r ApiApiControllersTaskControllerGetTasksStatusRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.ApiControllersTaskControllerGetTasksStatusExecute(r)
}

/*
ApiControllersTaskControllerGetTasksStatus List tasks

Returns all available information about the specified tasks

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiControllersTaskControllerGetTasksStatusRequest
*/
func (a *TasksAPIService) ApiControllersTaskControllerGetTasksStatus(ctx context.Context) ApiApiControllersTaskControllerGetTasksStatusRequest {
	return ApiApiControllersTaskControllerGetTasksStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *TasksAPIService) ApiControllersTaskControllerGetTasksStatusExecute(r ApiApiControllersTaskControllerGetTasksStatusRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TasksAPIService.ApiControllersTaskControllerGetTasksStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tasks/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.agentsList != nil {
		t := *r.agentsList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", t, "form", "multi")
		}
	}
	if r.tasksList != nil {
		t := *r.tasksList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tasks_list", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tasks_list", t, "form", "multi")
		}
	}
	if r.command != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "command", r.command, "form", "")
	}
	if r.node != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "node", r.node, "form", "")
	}
	if r.module != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "module", r.module, "form", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
