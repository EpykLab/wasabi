/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// ExperimentalAPIService ExperimentalAPI service
type ExperimentalAPIService service

type ApiApiControllersExperimentalControllerClearRootcheckDatabaseRequest struct {
	ctx context.Context
	ApiService *ExperimentalAPIService
	agentsList *[]string
	pretty *bool
	waitForComplete *bool
}

// List of agent IDs (separated by comma), use the keyword &#x60;all&#x60; to select all agents
func (r ApiApiControllersExperimentalControllerClearRootcheckDatabaseRequest) AgentsList(agentsList []string) ApiApiControllersExperimentalControllerClearRootcheckDatabaseRequest {
	r.agentsList = &agentsList
	return r
}

// Show results in human-readable format
func (r ApiApiControllersExperimentalControllerClearRootcheckDatabaseRequest) Pretty(pretty bool) ApiApiControllersExperimentalControllerClearRootcheckDatabaseRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersExperimentalControllerClearRootcheckDatabaseRequest) WaitForComplete(waitForComplete bool) ApiApiControllersExperimentalControllerClearRootcheckDatabaseRequest {
	r.waitForComplete = &waitForComplete
	return r
}

func (r ApiApiControllersExperimentalControllerClearRootcheckDatabaseRequest) Execute() (*ApiControllersMitreControllerGetGroups200Response, *http.Response, error) {
	return r.ApiService.ApiControllersExperimentalControllerClearRootcheckDatabaseExecute(r)
}

/*
ApiControllersExperimentalControllerClearRootcheckDatabase Clear rootcheck results

Clear rootcheck database for all agents or a list of them

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiControllersExperimentalControllerClearRootcheckDatabaseRequest
*/
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerClearRootcheckDatabase(ctx context.Context) ApiApiControllersExperimentalControllerClearRootcheckDatabaseRequest {
	return ApiApiControllersExperimentalControllerClearRootcheckDatabaseRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiControllersMitreControllerGetGroups200Response
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerClearRootcheckDatabaseExecute(r ApiApiControllersExperimentalControllerClearRootcheckDatabaseRequest) (*ApiControllersMitreControllerGetGroups200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersMitreControllerGetGroups200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentalAPIService.ApiControllersExperimentalControllerClearRootcheckDatabase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/experimental/rootcheck"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agentsList == nil {
		return localVarReturnValue, nil, reportError("agentsList is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	{
		t := *r.agentsList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersExperimentalControllerClearSyscheckDatabaseRequest struct {
	ctx context.Context
	ApiService *ExperimentalAPIService
	agentsList *[]string
	pretty *bool
	waitForComplete *bool
}

// List of agent IDs (separated by comma), use the keyword &#x60;all&#x60; to select all agents
func (r ApiApiControllersExperimentalControllerClearSyscheckDatabaseRequest) AgentsList(agentsList []string) ApiApiControllersExperimentalControllerClearSyscheckDatabaseRequest {
	r.agentsList = &agentsList
	return r
}

// Show results in human-readable format
func (r ApiApiControllersExperimentalControllerClearSyscheckDatabaseRequest) Pretty(pretty bool) ApiApiControllersExperimentalControllerClearSyscheckDatabaseRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersExperimentalControllerClearSyscheckDatabaseRequest) WaitForComplete(waitForComplete bool) ApiApiControllersExperimentalControllerClearSyscheckDatabaseRequest {
	r.waitForComplete = &waitForComplete
	return r
}

func (r ApiApiControllersExperimentalControllerClearSyscheckDatabaseRequest) Execute() (*ApiControllersAgentControllerRestartAgentsByNode200Response, *http.Response, error) {
	return r.ApiService.ApiControllersExperimentalControllerClearSyscheckDatabaseExecute(r)
}

/*
ApiControllersExperimentalControllerClearSyscheckDatabase Clear agents FIM results

Clear the syscheck database for all agents or a list of them

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiControllersExperimentalControllerClearSyscheckDatabaseRequest
*/
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerClearSyscheckDatabase(ctx context.Context) ApiApiControllersExperimentalControllerClearSyscheckDatabaseRequest {
	return ApiApiControllersExperimentalControllerClearSyscheckDatabaseRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiControllersAgentControllerRestartAgentsByNode200Response
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerClearSyscheckDatabaseExecute(r ApiApiControllersExperimentalControllerClearSyscheckDatabaseRequest) (*ApiControllersAgentControllerRestartAgentsByNode200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersAgentControllerRestartAgentsByNode200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentalAPIService.ApiControllersExperimentalControllerClearSyscheckDatabase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/experimental/syscheck"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agentsList == nil {
		return localVarReturnValue, nil, reportError("agentsList is required and must be specified")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	{
		t := *r.agentsList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersExperimentalControllerGetCisCatResultsRequest struct {
	ctx context.Context
	ApiService *ExperimentalAPIService
	pretty *bool
	waitForComplete *bool
	agentsList *[]string
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	benchmark *string
	profile *string
	pass *int32
	fail *int32
	error_ *int32
	notchecked *int32
	unknown *int32
	score *int32
}

// Show results in human-readable format
func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) Pretty(pretty bool) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) WaitForComplete(waitForComplete bool) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// List of agent IDs (separated by comma), all agents selected by default if not specified
func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) AgentsList(agentsList []string) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	r.agentsList = &agentsList
	return r
}

// First element to return in the collection
func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) Offset(offset int32) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) Limit(limit int32) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) Sort(sort string) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) Search(search string) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) Select_(select_ []string) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	r.select_ = &select_
	return r
}

// Filter by benchmark type
func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) Benchmark(benchmark string) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	r.benchmark = &benchmark
	return r
}

// Filter by evaluated profile
func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) Profile(profile string) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	r.profile = &profile
	return r
}

// Filter by passed checks
func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) Pass(pass int32) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	r.pass = &pass
	return r
}

// Filter by failed checks
func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) Fail(fail int32) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	r.fail = &fail
	return r
}

// Filter by encountered errors
func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) Error_(error_ int32) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	r.error_ = &error_
	return r
}

// Filter by not checked
func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) Notchecked(notchecked int32) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	r.notchecked = &notchecked
	return r
}

// Filter by unknown results
func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) Unknown(unknown int32) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	r.unknown = &unknown
	return r
}

// Filter by final score
func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) Score(score int32) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	r.score = &score
	return r
}

func (r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) Execute() (*ApiControllersCiscatControllerGetAgentsCiscatResults200Response, *http.Response, error) {
	return r.ApiService.ApiControllersExperimentalControllerGetCisCatResultsExecute(r)
}

/*
ApiControllersExperimentalControllerGetCisCatResults Get agents CIS-CAT results

Return CIS-CAT results for all agents or a list of them

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiControllersExperimentalControllerGetCisCatResultsRequest
*/
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetCisCatResults(ctx context.Context) ApiApiControllersExperimentalControllerGetCisCatResultsRequest {
	return ApiApiControllersExperimentalControllerGetCisCatResultsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiControllersCiscatControllerGetAgentsCiscatResults200Response
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetCisCatResultsExecute(r ApiApiControllersExperimentalControllerGetCisCatResultsRequest) (*ApiControllersCiscatControllerGetAgentsCiscatResults200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersCiscatControllerGetAgentsCiscatResults200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentalAPIService.ApiControllersExperimentalControllerGetCisCatResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/experimental/ciscat/results"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.agentsList != nil {
		t := *r.agentsList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.benchmark != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "benchmark", r.benchmark, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	}
	if r.pass != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pass", r.pass, "form", "")
	}
	if r.fail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fail", r.fail, "form", "")
	}
	if r.error_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "error", r.error_, "form", "")
	}
	if r.notchecked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "notchecked", r.notchecked, "form", "")
	}
	if r.unknown != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unknown", r.unknown, "form", "")
	}
	if r.score != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "score", r.score, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersExperimentalControllerGetHardwareInfoRequest struct {
	ctx context.Context
	ApiService *ExperimentalAPIService
	pretty *bool
	waitForComplete *bool
	agentsList *[]string
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	ramFree *int64
	ramTotal *int64
	cpuCores *int32
	cpuMhz *float32
	cpuName *string
	boardSerial *string
}

// Show results in human-readable format
func (r ApiApiControllersExperimentalControllerGetHardwareInfoRequest) Pretty(pretty bool) ApiApiControllersExperimentalControllerGetHardwareInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersExperimentalControllerGetHardwareInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersExperimentalControllerGetHardwareInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// List of agent IDs (separated by comma), all agents selected by default if not specified
func (r ApiApiControllersExperimentalControllerGetHardwareInfoRequest) AgentsList(agentsList []string) ApiApiControllersExperimentalControllerGetHardwareInfoRequest {
	r.agentsList = &agentsList
	return r
}

// First element to return in the collection
func (r ApiApiControllersExperimentalControllerGetHardwareInfoRequest) Offset(offset int32) ApiApiControllersExperimentalControllerGetHardwareInfoRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersExperimentalControllerGetHardwareInfoRequest) Limit(limit int32) ApiApiControllersExperimentalControllerGetHardwareInfoRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetHardwareInfoRequest) Sort(sort string) ApiApiControllersExperimentalControllerGetHardwareInfoRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersExperimentalControllerGetHardwareInfoRequest) Search(search string) ApiApiControllersExperimentalControllerGetHardwareInfoRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetHardwareInfoRequest) Select_(select_ []string) ApiApiControllersExperimentalControllerGetHardwareInfoRequest {
	r.select_ = &select_
	return r
}

// Filter by ram.free
func (r ApiApiControllersExperimentalControllerGetHardwareInfoRequest) RamFree(ramFree int64) ApiApiControllersExperimentalControllerGetHardwareInfoRequest {
	r.ramFree = &ramFree
	return r
}

// Filter by ram.total
func (r ApiApiControllersExperimentalControllerGetHardwareInfoRequest) RamTotal(ramTotal int64) ApiApiControllersExperimentalControllerGetHardwareInfoRequest {
	r.ramTotal = &ramTotal
	return r
}

// Filter by cpu.cores
func (r ApiApiControllersExperimentalControllerGetHardwareInfoRequest) CpuCores(cpuCores int32) ApiApiControllersExperimentalControllerGetHardwareInfoRequest {
	r.cpuCores = &cpuCores
	return r
}

// Filter by cpu.mhz
func (r ApiApiControllersExperimentalControllerGetHardwareInfoRequest) CpuMhz(cpuMhz float32) ApiApiControllersExperimentalControllerGetHardwareInfoRequest {
	r.cpuMhz = &cpuMhz
	return r
}

// Filter by cpu.name
func (r ApiApiControllersExperimentalControllerGetHardwareInfoRequest) CpuName(cpuName string) ApiApiControllersExperimentalControllerGetHardwareInfoRequest {
	r.cpuName = &cpuName
	return r
}

// Filter by board_serial
func (r ApiApiControllersExperimentalControllerGetHardwareInfoRequest) BoardSerial(boardSerial string) ApiApiControllersExperimentalControllerGetHardwareInfoRequest {
	r.boardSerial = &boardSerial
	return r
}

func (r ApiApiControllersExperimentalControllerGetHardwareInfoRequest) Execute() (*ApiControllersExperimentalControllerGetHardwareInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersExperimentalControllerGetHardwareInfoExecute(r)
}

/*
ApiControllersExperimentalControllerGetHardwareInfo Get agents hardware

Return all agents (or a list of them) hardware info. This information include cpu, ram, scan info among others of all agents

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiControllersExperimentalControllerGetHardwareInfoRequest
*/
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetHardwareInfo(ctx context.Context) ApiApiControllersExperimentalControllerGetHardwareInfoRequest {
	return ApiApiControllersExperimentalControllerGetHardwareInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetHardwareInfo200Response
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetHardwareInfoExecute(r ApiApiControllersExperimentalControllerGetHardwareInfoRequest) (*ApiControllersExperimentalControllerGetHardwareInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetHardwareInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentalAPIService.ApiControllersExperimentalControllerGetHardwareInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/experimental/syscollector/hardware"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.agentsList != nil {
		t := *r.agentsList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.ramFree != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ram.free", r.ramFree, "form", "")
	}
	if r.ramTotal != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ram.total", r.ramTotal, "form", "")
	}
	if r.cpuCores != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpu.cores", r.cpuCores, "form", "")
	}
	if r.cpuMhz != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpu.mhz", r.cpuMhz, "form", "")
	}
	if r.cpuName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpu.name", r.cpuName, "form", "")
	}
	if r.boardSerial != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "board_serial", r.boardSerial, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersExperimentalControllerGetHotfixesInfoRequest struct {
	ctx context.Context
	ApiService *ExperimentalAPIService
	pretty *bool
	waitForComplete *bool
	agentsList *[]string
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	hotfix *string
}

// Show results in human-readable format
func (r ApiApiControllersExperimentalControllerGetHotfixesInfoRequest) Pretty(pretty bool) ApiApiControllersExperimentalControllerGetHotfixesInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersExperimentalControllerGetHotfixesInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersExperimentalControllerGetHotfixesInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// List of agent IDs (separated by comma), all agents selected by default if not specified
func (r ApiApiControllersExperimentalControllerGetHotfixesInfoRequest) AgentsList(agentsList []string) ApiApiControllersExperimentalControllerGetHotfixesInfoRequest {
	r.agentsList = &agentsList
	return r
}

// First element to return in the collection
func (r ApiApiControllersExperimentalControllerGetHotfixesInfoRequest) Offset(offset int32) ApiApiControllersExperimentalControllerGetHotfixesInfoRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersExperimentalControllerGetHotfixesInfoRequest) Limit(limit int32) ApiApiControllersExperimentalControllerGetHotfixesInfoRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetHotfixesInfoRequest) Sort(sort string) ApiApiControllersExperimentalControllerGetHotfixesInfoRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersExperimentalControllerGetHotfixesInfoRequest) Search(search string) ApiApiControllersExperimentalControllerGetHotfixesInfoRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetHotfixesInfoRequest) Select_(select_ []string) ApiApiControllersExperimentalControllerGetHotfixesInfoRequest {
	r.select_ = &select_
	return r
}

// Filter by hotfix
func (r ApiApiControllersExperimentalControllerGetHotfixesInfoRequest) Hotfix(hotfix string) ApiApiControllersExperimentalControllerGetHotfixesInfoRequest {
	r.hotfix = &hotfix
	return r
}

func (r ApiApiControllersExperimentalControllerGetHotfixesInfoRequest) Execute() (*ApiControllersExperimentalControllerGetHotfixesInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersExperimentalControllerGetHotfixesInfoExecute(r)
}

/*
ApiControllersExperimentalControllerGetHotfixesInfo Get agents hotfixes

Return all agents (or a list of them) hotfixes info

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiControllersExperimentalControllerGetHotfixesInfoRequest
*/
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetHotfixesInfo(ctx context.Context) ApiApiControllersExperimentalControllerGetHotfixesInfoRequest {
	return ApiApiControllersExperimentalControllerGetHotfixesInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetHotfixesInfo200Response
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetHotfixesInfoExecute(r ApiApiControllersExperimentalControllerGetHotfixesInfoRequest) (*ApiControllersExperimentalControllerGetHotfixesInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetHotfixesInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentalAPIService.ApiControllersExperimentalControllerGetHotfixesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/experimental/syscollector/hotfixes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.agentsList != nil {
		t := *r.agentsList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.hotfix != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotfix", r.hotfix, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest struct {
	ctx context.Context
	ApiService *ExperimentalAPIService
	pretty *bool
	waitForComplete *bool
	agentsList *[]string
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	proto *string
	address *string
	broadcast *string
	netmask *string
}

// Show results in human-readable format
func (r ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest) Pretty(pretty bool) ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// List of agent IDs (separated by comma), all agents selected by default if not specified
func (r ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest) AgentsList(agentsList []string) ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest {
	r.agentsList = &agentsList
	return r
}

// First element to return in the collection
func (r ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest) Offset(offset int32) ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest) Limit(limit int32) ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest) Sort(sort string) ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest) Search(search string) ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest) Select_(select_ []string) ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest {
	r.select_ = &select_
	return r
}

// Filter by IP protocol
func (r ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest) Proto(proto string) ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest {
	r.proto = &proto
	return r
}

// Filter by IP address
func (r ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest) Address(address string) ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest {
	r.address = &address
	return r
}

// Filter by broadcast direction
func (r ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest) Broadcast(broadcast string) ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest {
	r.broadcast = &broadcast
	return r
}

// Filter by netmask
func (r ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest) Netmask(netmask string) ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest {
	r.netmask = &netmask
	return r
}

func (r ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest) Execute() (*ApiControllersExperimentalControllerGetNetworkAddressInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersExperimentalControllerGetNetworkAddressInfoExecute(r)
}

/*
ApiControllersExperimentalControllerGetNetworkAddressInfo Get agents netaddr

Return all agents (or a list of them) IPv4 and IPv6 addresses associated to their network interfaces. This information include used IP protocol, interface, and IP address among others

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest
*/
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetNetworkAddressInfo(ctx context.Context) ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest {
	return ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetNetworkAddressInfo200Response
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetNetworkAddressInfoExecute(r ApiApiControllersExperimentalControllerGetNetworkAddressInfoRequest) (*ApiControllersExperimentalControllerGetNetworkAddressInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetNetworkAddressInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentalAPIService.ApiControllersExperimentalControllerGetNetworkAddressInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/experimental/syscollector/netaddr"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.agentsList != nil {
		t := *r.agentsList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.proto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proto", r.proto, "form", "")
	}
	if r.address != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "address", r.address, "form", "")
	}
	if r.broadcast != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "broadcast", r.broadcast, "form", "")
	}
	if r.netmask != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "netmask", r.netmask, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest struct {
	ctx context.Context
	ApiService *ExperimentalAPIService
	pretty *bool
	waitForComplete *bool
	agentsList *[]string
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	name *string
	adapter *string
	type_ *string
	state *string
	mtu *int32
	txPackets *int32
	rxPackets *int32
	txBytes *int32
	rxBytes *int32
	txErrors *int32
	rxErrors *int32
	txDropped *int32
	rxDropped *int32
}

// Show results in human-readable format
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) Pretty(pretty bool) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// List of agent IDs (separated by comma), all agents selected by default if not specified
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) AgentsList(agentsList []string) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.agentsList = &agentsList
	return r
}

// First element to return in the collection
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) Offset(offset int32) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) Limit(limit int32) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) Sort(sort string) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) Search(search string) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) Select_(select_ []string) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.select_ = &select_
	return r
}

// Filter by name
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) Name(name string) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.name = &name
	return r
}

// Filter by adapter
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) Adapter(adapter string) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.adapter = &adapter
	return r
}

// Type of network
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) Type_(type_ string) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.type_ = &type_
	return r
}

// Filter by state
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) State(state string) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.state = &state
	return r
}

// Filter by mtu
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) Mtu(mtu int32) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.mtu = &mtu
	return r
}

// Filter by tx.packets
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) TxPackets(txPackets int32) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.txPackets = &txPackets
	return r
}

// Filter by rx.packets
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) RxPackets(rxPackets int32) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.rxPackets = &rxPackets
	return r
}

// Filter by tx.bytes
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) TxBytes(txBytes int32) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.txBytes = &txBytes
	return r
}

// Filter by rx.bytes
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) RxBytes(rxBytes int32) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.rxBytes = &rxBytes
	return r
}

// Filter by tx.errors
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) TxErrors(txErrors int32) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.txErrors = &txErrors
	return r
}

// Filter by rx.errors
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) RxErrors(rxErrors int32) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.rxErrors = &rxErrors
	return r
}

// Filter by tx.dropped
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) TxDropped(txDropped int32) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.txDropped = &txDropped
	return r
}

// Filter by rx.dropped
func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) RxDropped(rxDropped int32) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	r.rxDropped = &rxDropped
	return r
}

func (r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) Execute() (*ApiControllersExperimentalControllerGetNetworkInterfaceInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersExperimentalControllerGetNetworkInterfaceInfoExecute(r)
}

/*
ApiControllersExperimentalControllerGetNetworkInterfaceInfo Get agents netiface

Return all agents (or a list of them) network interfaces. This information includes rx, scan, tx info and some network information among other

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest
*/
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetNetworkInterfaceInfo(ctx context.Context) ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest {
	return ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetNetworkInterfaceInfo200Response
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetNetworkInterfaceInfoExecute(r ApiApiControllersExperimentalControllerGetNetworkInterfaceInfoRequest) (*ApiControllersExperimentalControllerGetNetworkInterfaceInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetNetworkInterfaceInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentalAPIService.ApiControllersExperimentalControllerGetNetworkInterfaceInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/experimental/syscollector/netiface"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.agentsList != nil {
		t := *r.agentsList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.adapter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adapter", r.adapter, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.mtu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mtu", r.mtu, "form", "")
	}
	if r.txPackets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tx.packets", r.txPackets, "form", "")
	}
	if r.rxPackets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rx.packets", r.rxPackets, "form", "")
	}
	if r.txBytes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tx.bytes", r.txBytes, "form", "")
	}
	if r.rxBytes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rx.bytes", r.rxBytes, "form", "")
	}
	if r.txErrors != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tx.errors", r.txErrors, "form", "")
	}
	if r.rxErrors != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rx.errors", r.rxErrors, "form", "")
	}
	if r.txDropped != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tx.dropped", r.txDropped, "form", "")
	}
	if r.rxDropped != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rx.dropped", r.rxDropped, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest struct {
	ctx context.Context
	ApiService *ExperimentalAPIService
	pretty *bool
	waitForComplete *bool
	agentsList *[]string
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	iface *string
	type_ *string
	gateway *string
	dhcp *DHCPStatus
}

// Show results in human-readable format
func (r ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest) Pretty(pretty bool) ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// List of agent IDs (separated by comma), all agents selected by default if not specified
func (r ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest) AgentsList(agentsList []string) ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest {
	r.agentsList = &agentsList
	return r
}

// First element to return in the collection
func (r ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest) Offset(offset int32) ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest) Limit(limit int32) ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest) Sort(sort string) ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest) Search(search string) ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest) Select_(select_ []string) ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest {
	r.select_ = &select_
	return r
}

// Filter by network interface
func (r ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest) Iface(iface string) ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest {
	r.iface = &iface
	return r
}

// Type of network
func (r ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest) Type_(type_ string) ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest {
	r.type_ = &type_
	return r
}

// Filter by network gateway
func (r ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest) Gateway(gateway string) ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest {
	r.gateway = &gateway
	return r
}

// Filter by network dhcp (enabled or disabled)
func (r ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest) Dhcp(dhcp DHCPStatus) ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest {
	r.dhcp = &dhcp
	return r
}

func (r ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest) Execute() (*ApiControllersExperimentalControllerGetNetworkProtocolInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersExperimentalControllerGetNetworkProtocolInfoExecute(r)
}

/*
ApiControllersExperimentalControllerGetNetworkProtocolInfo Get agents netproto

Return all agents (or a list of them) routing configuration for each network interface. This information includes interface, type protocol information among other

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest
*/
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetNetworkProtocolInfo(ctx context.Context) ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest {
	return ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetNetworkProtocolInfo200Response
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetNetworkProtocolInfoExecute(r ApiApiControllersExperimentalControllerGetNetworkProtocolInfoRequest) (*ApiControllersExperimentalControllerGetNetworkProtocolInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetNetworkProtocolInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentalAPIService.ApiControllersExperimentalControllerGetNetworkProtocolInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/experimental/syscollector/netproto"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.agentsList != nil {
		t := *r.agentsList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.iface != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "iface", r.iface, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.gateway != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gateway", r.gateway, "form", "")
	}
	if r.dhcp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dhcp", r.dhcp, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersExperimentalControllerGetOsInfoRequest struct {
	ctx context.Context
	ApiService *ExperimentalAPIService
	pretty *bool
	waitForComplete *bool
	agentsList *[]string
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	osName *string
	architecture *string
	osVersion *string
	version *string
	release *string
}

// Show results in human-readable format
func (r ApiApiControllersExperimentalControllerGetOsInfoRequest) Pretty(pretty bool) ApiApiControllersExperimentalControllerGetOsInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersExperimentalControllerGetOsInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersExperimentalControllerGetOsInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// List of agent IDs (separated by comma), all agents selected by default if not specified
func (r ApiApiControllersExperimentalControllerGetOsInfoRequest) AgentsList(agentsList []string) ApiApiControllersExperimentalControllerGetOsInfoRequest {
	r.agentsList = &agentsList
	return r
}

// First element to return in the collection
func (r ApiApiControllersExperimentalControllerGetOsInfoRequest) Offset(offset int32) ApiApiControllersExperimentalControllerGetOsInfoRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersExperimentalControllerGetOsInfoRequest) Limit(limit int32) ApiApiControllersExperimentalControllerGetOsInfoRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetOsInfoRequest) Sort(sort string) ApiApiControllersExperimentalControllerGetOsInfoRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersExperimentalControllerGetOsInfoRequest) Search(search string) ApiApiControllersExperimentalControllerGetOsInfoRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetOsInfoRequest) Select_(select_ []string) ApiApiControllersExperimentalControllerGetOsInfoRequest {
	r.select_ = &select_
	return r
}

// Filter by OS name
func (r ApiApiControllersExperimentalControllerGetOsInfoRequest) OsName(osName string) ApiApiControllersExperimentalControllerGetOsInfoRequest {
	r.osName = &osName
	return r
}

// Filter by architecture
func (r ApiApiControllersExperimentalControllerGetOsInfoRequest) Architecture(architecture string) ApiApiControllersExperimentalControllerGetOsInfoRequest {
	r.architecture = &architecture
	return r
}

// Filter by OS version
func (r ApiApiControllersExperimentalControllerGetOsInfoRequest) OsVersion(osVersion string) ApiApiControllersExperimentalControllerGetOsInfoRequest {
	r.osVersion = &osVersion
	return r
}

// Filter by agents version using one of the following formats: &#39;X.Y.Z&#39;, &#39;vX.Y.Z&#39;, &#39;wazuh X.Y.Z&#39; or &#39;wazuh vX.Y.Z&#39;. For example: &#39;4.4.0&#39;
func (r ApiApiControllersExperimentalControllerGetOsInfoRequest) Version(version string) ApiApiControllersExperimentalControllerGetOsInfoRequest {
	r.version = &version
	return r
}

// Filter by release
func (r ApiApiControllersExperimentalControllerGetOsInfoRequest) Release(release string) ApiApiControllersExperimentalControllerGetOsInfoRequest {
	r.release = &release
	return r
}

func (r ApiApiControllersExperimentalControllerGetOsInfoRequest) Execute() (*ApiControllersExperimentalControllerGetOsInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersExperimentalControllerGetOsInfoExecute(r)
}

/*
ApiControllersExperimentalControllerGetOsInfo Get agents OS

Return all agents (or a list of them) OS info. This information includes os information, architecture information among other

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiControllersExperimentalControllerGetOsInfoRequest
*/
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetOsInfo(ctx context.Context) ApiApiControllersExperimentalControllerGetOsInfoRequest {
	return ApiApiControllersExperimentalControllerGetOsInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetOsInfo200Response
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetOsInfoExecute(r ApiApiControllersExperimentalControllerGetOsInfoRequest) (*ApiControllersExperimentalControllerGetOsInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetOsInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentalAPIService.ApiControllersExperimentalControllerGetOsInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/experimental/syscollector/os"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.agentsList != nil {
		t := *r.agentsList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.osName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "os.name", r.osName, "form", "")
	}
	if r.architecture != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "architecture", r.architecture, "form", "")
	}
	if r.osVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "os.version", r.osVersion, "form", "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "form", "")
	}
	if r.release != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "release", r.release, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersExperimentalControllerGetPackagesInfoRequest struct {
	ctx context.Context
	ApiService *ExperimentalAPIService
	pretty *bool
	waitForComplete *bool
	agentsList *[]string
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	vendor *string
	name *string
	architecture *string
	format *string
	version *string
}

// Show results in human-readable format
func (r ApiApiControllersExperimentalControllerGetPackagesInfoRequest) Pretty(pretty bool) ApiApiControllersExperimentalControllerGetPackagesInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersExperimentalControllerGetPackagesInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersExperimentalControllerGetPackagesInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// List of agent IDs (separated by comma), all agents selected by default if not specified
func (r ApiApiControllersExperimentalControllerGetPackagesInfoRequest) AgentsList(agentsList []string) ApiApiControllersExperimentalControllerGetPackagesInfoRequest {
	r.agentsList = &agentsList
	return r
}

// First element to return in the collection
func (r ApiApiControllersExperimentalControllerGetPackagesInfoRequest) Offset(offset int32) ApiApiControllersExperimentalControllerGetPackagesInfoRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersExperimentalControllerGetPackagesInfoRequest) Limit(limit int32) ApiApiControllersExperimentalControllerGetPackagesInfoRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetPackagesInfoRequest) Sort(sort string) ApiApiControllersExperimentalControllerGetPackagesInfoRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersExperimentalControllerGetPackagesInfoRequest) Search(search string) ApiApiControllersExperimentalControllerGetPackagesInfoRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetPackagesInfoRequest) Select_(select_ []string) ApiApiControllersExperimentalControllerGetPackagesInfoRequest {
	r.select_ = &select_
	return r
}

// Filter by vendor
func (r ApiApiControllersExperimentalControllerGetPackagesInfoRequest) Vendor(vendor string) ApiApiControllersExperimentalControllerGetPackagesInfoRequest {
	r.vendor = &vendor
	return r
}

// Filter by name
func (r ApiApiControllersExperimentalControllerGetPackagesInfoRequest) Name(name string) ApiApiControllersExperimentalControllerGetPackagesInfoRequest {
	r.name = &name
	return r
}

// Filter by architecture
func (r ApiApiControllersExperimentalControllerGetPackagesInfoRequest) Architecture(architecture string) ApiApiControllersExperimentalControllerGetPackagesInfoRequest {
	r.architecture = &architecture
	return r
}

// Filter by file format. For example &#39;deb&#39; will output deb files
func (r ApiApiControllersExperimentalControllerGetPackagesInfoRequest) Format(format string) ApiApiControllersExperimentalControllerGetPackagesInfoRequest {
	r.format = &format
	return r
}

// Filter by package version
func (r ApiApiControllersExperimentalControllerGetPackagesInfoRequest) Version(version string) ApiApiControllersExperimentalControllerGetPackagesInfoRequest {
	r.version = &version
	return r
}

func (r ApiApiControllersExperimentalControllerGetPackagesInfoRequest) Execute() (*ApiControllersExperimentalControllerGetPackagesInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersExperimentalControllerGetPackagesInfoExecute(r)
}

/*
ApiControllersExperimentalControllerGetPackagesInfo Get agents packages

Return all agents (or a list of them) packages info. This information includes name, section, size, and priority information of all packages among other

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiControllersExperimentalControllerGetPackagesInfoRequest
*/
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetPackagesInfo(ctx context.Context) ApiApiControllersExperimentalControllerGetPackagesInfoRequest {
	return ApiApiControllersExperimentalControllerGetPackagesInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetPackagesInfo200Response
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetPackagesInfoExecute(r ApiApiControllersExperimentalControllerGetPackagesInfoRequest) (*ApiControllersExperimentalControllerGetPackagesInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetPackagesInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentalAPIService.ApiControllersExperimentalControllerGetPackagesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/experimental/syscollector/packages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.agentsList != nil {
		t := *r.agentsList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.vendor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vendor", r.vendor, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.architecture != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "architecture", r.architecture, "form", "")
	}
	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersExperimentalControllerGetPortsInfoRequest struct {
	ctx context.Context
	ApiService *ExperimentalAPIService
	pretty *bool
	waitForComplete *bool
	agentsList *[]string
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	pid *string
	protocol *string
	localIp *string
	localPort *string
	remoteIp *string
	txQueue *string
	state *string
	process *string
}

// Show results in human-readable format
func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) Pretty(pretty bool) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// List of agent IDs (separated by comma), all agents selected by default if not specified
func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) AgentsList(agentsList []string) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	r.agentsList = &agentsList
	return r
}

// First element to return in the collection
func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) Offset(offset int32) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) Limit(limit int32) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) Sort(sort string) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) Search(search string) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) Select_(select_ []string) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	r.select_ = &select_
	return r
}

// Filter by pid
func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) Pid(pid string) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	r.pid = &pid
	return r
}

// Filter by protocol
func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) Protocol(protocol string) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	r.protocol = &protocol
	return r
}

// Filter by Local IP
func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) LocalIp(localIp string) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	r.localIp = &localIp
	return r
}

// Filter by Local Port
func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) LocalPort(localPort string) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	r.localPort = &localPort
	return r
}

// Filter by Remote IP
func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) RemoteIp(remoteIp string) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	r.remoteIp = &remoteIp
	return r
}

// Filter by tx_queue
func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) TxQueue(txQueue string) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	r.txQueue = &txQueue
	return r
}

// Filter by state
func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) State(state string) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	r.state = &state
	return r
}

// Filter by process name
func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) Process(process string) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	r.process = &process
	return r
}

func (r ApiApiControllersExperimentalControllerGetPortsInfoRequest) Execute() (*ApiControllersExperimentalControllerGetPortsInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersExperimentalControllerGetPortsInfoExecute(r)
}

/*
ApiControllersExperimentalControllerGetPortsInfo Get agents ports

Return all agents (or a list of them) ports info. This information includes local IP, Remote IP, protocol information among other

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiControllersExperimentalControllerGetPortsInfoRequest
*/
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetPortsInfo(ctx context.Context) ApiApiControllersExperimentalControllerGetPortsInfoRequest {
	return ApiApiControllersExperimentalControllerGetPortsInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetPortsInfo200Response
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetPortsInfoExecute(r ApiApiControllersExperimentalControllerGetPortsInfoRequest) (*ApiControllersExperimentalControllerGetPortsInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetPortsInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentalAPIService.ApiControllersExperimentalControllerGetPortsInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/experimental/syscollector/ports"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.agentsList != nil {
		t := *r.agentsList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.pid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pid", r.pid, "form", "")
	}
	if r.protocol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "protocol", r.protocol, "form", "")
	}
	if r.localIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "local.ip", r.localIp, "form", "")
	}
	if r.localPort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "local.port", r.localPort, "form", "")
	}
	if r.remoteIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "remote.ip", r.remoteIp, "form", "")
	}
	if r.txQueue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tx_queue", r.txQueue, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.process != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "process", r.process, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersExperimentalControllerGetProcessesInfoRequest struct {
	ctx context.Context
	ApiService *ExperimentalAPIService
	pretty *bool
	waitForComplete *bool
	agentsList *[]string
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	pid *string
	state *string
	ppid *string
	egroup *string
	euser *string
	fgroup *string
	name *string
	nlwp *string
	pgrp *string
	priority *string
	rgroup *string
	ruser *string
	sgroup *string
	suser *string
}

// Show results in human-readable format
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Pretty(pretty bool) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) WaitForComplete(waitForComplete bool) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// List of agent IDs (separated by comma), all agents selected by default if not specified
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) AgentsList(agentsList []string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.agentsList = &agentsList
	return r
}

// First element to return in the collection
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Offset(offset int32) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Limit(limit int32) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Sort(sort string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Search(search string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Select_(select_ []string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.select_ = &select_
	return r
}

// Filter by process pid
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Pid(pid string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.pid = &pid
	return r
}

// Filter by process state
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) State(state string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.state = &state
	return r
}

// Filter by process parent pid
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Ppid(ppid string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.ppid = &ppid
	return r
}

// Filter by process egroup
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Egroup(egroup string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.egroup = &egroup
	return r
}

// Filter by process euser
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Euser(euser string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.euser = &euser
	return r
}

// Filter by process fgroup
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Fgroup(fgroup string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.fgroup = &fgroup
	return r
}

// Filter by process name
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Name(name string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.name = &name
	return r
}

// Filter by process nlwp
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Nlwp(nlwp string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.nlwp = &nlwp
	return r
}

// Filter by process pgrp
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Pgrp(pgrp string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.pgrp = &pgrp
	return r
}

// Filter by process priority
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Priority(priority string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.priority = &priority
	return r
}

// Filter by process rgroup
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Rgroup(rgroup string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.rgroup = &rgroup
	return r
}

// Filter by process ruser
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Ruser(ruser string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.ruser = &ruser
	return r
}

// Filter by process sgroup
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Sgroup(sgroup string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.sgroup = &sgroup
	return r
}

// Filter by process suser
func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Suser(suser string) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	r.suser = &suser
	return r
}

func (r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) Execute() (*ApiControllersExperimentalControllerGetProcessesInfo200Response, *http.Response, error) {
	return r.ApiService.ApiControllersExperimentalControllerGetProcessesInfoExecute(r)
}

/*
ApiControllersExperimentalControllerGetProcessesInfo Get agents processes

Return all agents (or a list of them) processes info

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiControllersExperimentalControllerGetProcessesInfoRequest
*/
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetProcessesInfo(ctx context.Context) ApiApiControllersExperimentalControllerGetProcessesInfoRequest {
	return ApiApiControllersExperimentalControllerGetProcessesInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiControllersExperimentalControllerGetProcessesInfo200Response
func (a *ExperimentalAPIService) ApiControllersExperimentalControllerGetProcessesInfoExecute(r ApiApiControllersExperimentalControllerGetProcessesInfoRequest) (*ApiControllersExperimentalControllerGetProcessesInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersExperimentalControllerGetProcessesInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentalAPIService.ApiControllersExperimentalControllerGetProcessesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/experimental/syscollector/processes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.agentsList != nil {
		t := *r.agentsList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "agents_list", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.pid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pid", r.pid, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.ppid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ppid", r.ppid, "form", "")
	}
	if r.egroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "egroup", r.egroup, "form", "")
	}
	if r.euser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "euser", r.euser, "form", "")
	}
	if r.fgroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fgroup", r.fgroup, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.nlwp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nlwp", r.nlwp, "form", "")
	}
	if r.pgrp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pgrp", r.pgrp, "form", "")
	}
	if r.priority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priority", r.priority, "form", "")
	}
	if r.rgroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rgroup", r.rgroup, "form", "")
	}
	if r.ruser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ruser", r.ruser, "form", "")
	}
	if r.sgroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sgroup", r.sgroup, "form", "")
	}
	if r.suser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "suser", r.suser, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
