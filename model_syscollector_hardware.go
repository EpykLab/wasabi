/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SyscollectorHardware type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyscollectorHardware{}

// SyscollectorHardware struct for SyscollectorHardware
type SyscollectorHardware struct {
	// Motherboard serial number. This value will be empty in virtual machines
	BoardSerial *string `json:"board_serial,omitempty"`
	Cpu *SyscollectorHardwareCpu `json:"cpu,omitempty"`
	Ram *SyscollectorHardwareRam `json:"ram,omitempty"`
	Scan *ScanIdTime `json:"scan,omitempty"`
	// Agent ID
	AgentId *string `json:"agent_id,omitempty"`
}

// NewSyscollectorHardware instantiates a new SyscollectorHardware object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyscollectorHardware() *SyscollectorHardware {
	this := SyscollectorHardware{}
	return &this
}

// NewSyscollectorHardwareWithDefaults instantiates a new SyscollectorHardware object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyscollectorHardwareWithDefaults() *SyscollectorHardware {
	this := SyscollectorHardware{}
	return &this
}

// GetBoardSerial returns the BoardSerial field value if set, zero value otherwise.
func (o *SyscollectorHardware) GetBoardSerial() string {
	if o == nil || IsNil(o.BoardSerial) {
		var ret string
		return ret
	}
	return *o.BoardSerial
}

// GetBoardSerialOk returns a tuple with the BoardSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyscollectorHardware) GetBoardSerialOk() (*string, bool) {
	if o == nil || IsNil(o.BoardSerial) {
		return nil, false
	}
	return o.BoardSerial, true
}

// HasBoardSerial returns a boolean if a field has been set.
func (o *SyscollectorHardware) HasBoardSerial() bool {
	if o != nil && !IsNil(o.BoardSerial) {
		return true
	}

	return false
}

// SetBoardSerial gets a reference to the given string and assigns it to the BoardSerial field.
func (o *SyscollectorHardware) SetBoardSerial(v string) {
	o.BoardSerial = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *SyscollectorHardware) GetCpu() SyscollectorHardwareCpu {
	if o == nil || IsNil(o.Cpu) {
		var ret SyscollectorHardwareCpu
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyscollectorHardware) GetCpuOk() (*SyscollectorHardwareCpu, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *SyscollectorHardware) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given SyscollectorHardwareCpu and assigns it to the Cpu field.
func (o *SyscollectorHardware) SetCpu(v SyscollectorHardwareCpu) {
	o.Cpu = &v
}

// GetRam returns the Ram field value if set, zero value otherwise.
func (o *SyscollectorHardware) GetRam() SyscollectorHardwareRam {
	if o == nil || IsNil(o.Ram) {
		var ret SyscollectorHardwareRam
		return ret
	}
	return *o.Ram
}

// GetRamOk returns a tuple with the Ram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyscollectorHardware) GetRamOk() (*SyscollectorHardwareRam, bool) {
	if o == nil || IsNil(o.Ram) {
		return nil, false
	}
	return o.Ram, true
}

// HasRam returns a boolean if a field has been set.
func (o *SyscollectorHardware) HasRam() bool {
	if o != nil && !IsNil(o.Ram) {
		return true
	}

	return false
}

// SetRam gets a reference to the given SyscollectorHardwareRam and assigns it to the Ram field.
func (o *SyscollectorHardware) SetRam(v SyscollectorHardwareRam) {
	o.Ram = &v
}

// GetScan returns the Scan field value if set, zero value otherwise.
func (o *SyscollectorHardware) GetScan() ScanIdTime {
	if o == nil || IsNil(o.Scan) {
		var ret ScanIdTime
		return ret
	}
	return *o.Scan
}

// GetScanOk returns a tuple with the Scan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyscollectorHardware) GetScanOk() (*ScanIdTime, bool) {
	if o == nil || IsNil(o.Scan) {
		return nil, false
	}
	return o.Scan, true
}

// HasScan returns a boolean if a field has been set.
func (o *SyscollectorHardware) HasScan() bool {
	if o != nil && !IsNil(o.Scan) {
		return true
	}

	return false
}

// SetScan gets a reference to the given ScanIdTime and assigns it to the Scan field.
func (o *SyscollectorHardware) SetScan(v ScanIdTime) {
	o.Scan = &v
}

// GetAgentId returns the AgentId field value if set, zero value otherwise.
func (o *SyscollectorHardware) GetAgentId() string {
	if o == nil || IsNil(o.AgentId) {
		var ret string
		return ret
	}
	return *o.AgentId
}

// GetAgentIdOk returns a tuple with the AgentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyscollectorHardware) GetAgentIdOk() (*string, bool) {
	if o == nil || IsNil(o.AgentId) {
		return nil, false
	}
	return o.AgentId, true
}

// HasAgentId returns a boolean if a field has been set.
func (o *SyscollectorHardware) HasAgentId() bool {
	if o != nil && !IsNil(o.AgentId) {
		return true
	}

	return false
}

// SetAgentId gets a reference to the given string and assigns it to the AgentId field.
func (o *SyscollectorHardware) SetAgentId(v string) {
	o.AgentId = &v
}

func (o SyscollectorHardware) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyscollectorHardware) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BoardSerial) {
		toSerialize["board_serial"] = o.BoardSerial
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Ram) {
		toSerialize["ram"] = o.Ram
	}
	if !IsNil(o.Scan) {
		toSerialize["scan"] = o.Scan
	}
	if !IsNil(o.AgentId) {
		toSerialize["agent_id"] = o.AgentId
	}
	return toSerialize, nil
}

type NullableSyscollectorHardware struct {
	value *SyscollectorHardware
	isSet bool
}

func (v NullableSyscollectorHardware) Get() *SyscollectorHardware {
	return v.value
}

func (v *NullableSyscollectorHardware) Set(val *SyscollectorHardware) {
	v.value = val
	v.isSet = true
}

func (v NullableSyscollectorHardware) IsSet() bool {
	return v.isSet
}

func (v *NullableSyscollectorHardware) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyscollectorHardware(val *SyscollectorHardware) *NullableSyscollectorHardware {
	return &NullableSyscollectorHardware{value: val, isSet: true}
}

func (v NullableSyscollectorHardware) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyscollectorHardware) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


