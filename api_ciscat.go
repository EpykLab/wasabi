/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// CiscatAPIService CiscatAPI service
type CiscatAPIService service

type ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest struct {
	ctx context.Context
	ApiService *CiscatAPIService
	agentId string
	pretty *bool
	waitForComplete *bool
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	benchmark *string
	profile *string
	pass *int32
	fail *int32
	error_ *int32
	notchecked *int32
	unknown *int32
	score *int32
	q *string
}

// Show results in human-readable format
func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) Pretty(pretty bool) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) WaitForComplete(waitForComplete bool) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// First element to return in the collection
func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) Offset(offset int32) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) Limit(limit int32) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) Sort(sort string) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) Search(search string) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) Select_(select_ []string) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	r.select_ = &select_
	return r
}

// Filter by benchmark type
func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) Benchmark(benchmark string) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	r.benchmark = &benchmark
	return r
}

// Filter by evaluated profile
func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) Profile(profile string) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	r.profile = &profile
	return r
}

// Filter by passed checks
func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) Pass(pass int32) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	r.pass = &pass
	return r
}

// Filter by failed checks
func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) Fail(fail int32) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	r.fail = &fail
	return r
}

// Filter by encountered errors
func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) Error_(error_ int32) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	r.error_ = &error_
	return r
}

// Filter by not checked
func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) Notchecked(notchecked int32) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	r.notchecked = &notchecked
	return r
}

// Filter by unknown results
func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) Unknown(unknown int32) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	r.unknown = &unknown
	return r
}

// Filter by final score
func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) Score(score int32) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	r.score = &score
	return r
}

// Query to filter results by. For example q&#x3D;&amp;quot;status&#x3D;active&amp;quot;
func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) Q(q string) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	r.q = &q
	return r
}

func (r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) Execute() (*ApiControllersCiscatControllerGetAgentsCiscatResults200Response, *http.Response, error) {
	return r.ApiService.ApiControllersCiscatControllerGetAgentsCiscatResultsExecute(r)
}

/*
ApiControllersCiscatControllerGetAgentsCiscatResults Get results

Return the agent's ciscat results info

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId Agent ID. All possible values from 000 onwards
 @return ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest
*/
func (a *CiscatAPIService) ApiControllersCiscatControllerGetAgentsCiscatResults(ctx context.Context, agentId string) ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest {
	return ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return ApiControllersCiscatControllerGetAgentsCiscatResults200Response
func (a *CiscatAPIService) ApiControllersCiscatControllerGetAgentsCiscatResultsExecute(r ApiApiControllersCiscatControllerGetAgentsCiscatResultsRequest) (*ApiControllersCiscatControllerGetAgentsCiscatResults200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersCiscatControllerGetAgentsCiscatResults200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiscatAPIService.ApiControllersCiscatControllerGetAgentsCiscatResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ciscat/{agent_id}/results"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.agentId) < 3 {
		return localVarReturnValue, nil, reportError("agentId must have at least 3 elements")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.benchmark != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "benchmark", r.benchmark, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	}
	if r.pass != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pass", r.pass, "form", "")
	}
	if r.fail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fail", r.fail, "form", "")
	}
	if r.error_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "error", r.error_, "form", "")
	}
	if r.notchecked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "notchecked", r.notchecked, "form", "")
	}
	if r.unknown != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unknown", r.unknown, "form", "")
	}
	if r.score != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "score", r.score, "form", "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
