/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the CiscatResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CiscatResults{}

// CiscatResults struct for CiscatResults
type CiscatResults struct {
	// CIS-CAT benchmark where the profile is defined
	Benchmark *string `json:"benchmark,omitempty"`
	// Number of checks that CIS-CAT was not able to run
	Error *int32 `json:"error,omitempty"`
	// Number of failed checks. If this number is higher than 0 the host will probably have a vulnerability
	Fail *int32 `json:"fail,omitempty"`
	// Number of not passed checks
	Notchecked *int32 `json:"notchecked,omitempty"`
	// Number of passed checks
	Pass *int32 `json:"pass,omitempty"`
	// CIS-CAT profile scanned
	Profile *string `json:"profile,omitempty"`
	Scan *ScanIdTime `json:"scan,omitempty"`
	// Percentage of passed checks
	Score *int32 `json:"score,omitempty"`
	// Number of checks which status CIS-CAT was not able to determine
	Unknown *int32 `json:"unknown,omitempty"`
}

// NewCiscatResults instantiates a new CiscatResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCiscatResults() *CiscatResults {
	this := CiscatResults{}
	return &this
}

// NewCiscatResultsWithDefaults instantiates a new CiscatResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCiscatResultsWithDefaults() *CiscatResults {
	this := CiscatResults{}
	return &this
}

// GetBenchmark returns the Benchmark field value if set, zero value otherwise.
func (o *CiscatResults) GetBenchmark() string {
	if o == nil || IsNil(o.Benchmark) {
		var ret string
		return ret
	}
	return *o.Benchmark
}

// GetBenchmarkOk returns a tuple with the Benchmark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiscatResults) GetBenchmarkOk() (*string, bool) {
	if o == nil || IsNil(o.Benchmark) {
		return nil, false
	}
	return o.Benchmark, true
}

// HasBenchmark returns a boolean if a field has been set.
func (o *CiscatResults) HasBenchmark() bool {
	if o != nil && !IsNil(o.Benchmark) {
		return true
	}

	return false
}

// SetBenchmark gets a reference to the given string and assigns it to the Benchmark field.
func (o *CiscatResults) SetBenchmark(v string) {
	o.Benchmark = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *CiscatResults) GetError() int32 {
	if o == nil || IsNil(o.Error) {
		var ret int32
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiscatResults) GetErrorOk() (*int32, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *CiscatResults) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given int32 and assigns it to the Error field.
func (o *CiscatResults) SetError(v int32) {
	o.Error = &v
}

// GetFail returns the Fail field value if set, zero value otherwise.
func (o *CiscatResults) GetFail() int32 {
	if o == nil || IsNil(o.Fail) {
		var ret int32
		return ret
	}
	return *o.Fail
}

// GetFailOk returns a tuple with the Fail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiscatResults) GetFailOk() (*int32, bool) {
	if o == nil || IsNil(o.Fail) {
		return nil, false
	}
	return o.Fail, true
}

// HasFail returns a boolean if a field has been set.
func (o *CiscatResults) HasFail() bool {
	if o != nil && !IsNil(o.Fail) {
		return true
	}

	return false
}

// SetFail gets a reference to the given int32 and assigns it to the Fail field.
func (o *CiscatResults) SetFail(v int32) {
	o.Fail = &v
}

// GetNotchecked returns the Notchecked field value if set, zero value otherwise.
func (o *CiscatResults) GetNotchecked() int32 {
	if o == nil || IsNil(o.Notchecked) {
		var ret int32
		return ret
	}
	return *o.Notchecked
}

// GetNotcheckedOk returns a tuple with the Notchecked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiscatResults) GetNotcheckedOk() (*int32, bool) {
	if o == nil || IsNil(o.Notchecked) {
		return nil, false
	}
	return o.Notchecked, true
}

// HasNotchecked returns a boolean if a field has been set.
func (o *CiscatResults) HasNotchecked() bool {
	if o != nil && !IsNil(o.Notchecked) {
		return true
	}

	return false
}

// SetNotchecked gets a reference to the given int32 and assigns it to the Notchecked field.
func (o *CiscatResults) SetNotchecked(v int32) {
	o.Notchecked = &v
}

// GetPass returns the Pass field value if set, zero value otherwise.
func (o *CiscatResults) GetPass() int32 {
	if o == nil || IsNil(o.Pass) {
		var ret int32
		return ret
	}
	return *o.Pass
}

// GetPassOk returns a tuple with the Pass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiscatResults) GetPassOk() (*int32, bool) {
	if o == nil || IsNil(o.Pass) {
		return nil, false
	}
	return o.Pass, true
}

// HasPass returns a boolean if a field has been set.
func (o *CiscatResults) HasPass() bool {
	if o != nil && !IsNil(o.Pass) {
		return true
	}

	return false
}

// SetPass gets a reference to the given int32 and assigns it to the Pass field.
func (o *CiscatResults) SetPass(v int32) {
	o.Pass = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *CiscatResults) GetProfile() string {
	if o == nil || IsNil(o.Profile) {
		var ret string
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiscatResults) GetProfileOk() (*string, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *CiscatResults) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given string and assigns it to the Profile field.
func (o *CiscatResults) SetProfile(v string) {
	o.Profile = &v
}

// GetScan returns the Scan field value if set, zero value otherwise.
func (o *CiscatResults) GetScan() ScanIdTime {
	if o == nil || IsNil(o.Scan) {
		var ret ScanIdTime
		return ret
	}
	return *o.Scan
}

// GetScanOk returns a tuple with the Scan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiscatResults) GetScanOk() (*ScanIdTime, bool) {
	if o == nil || IsNil(o.Scan) {
		return nil, false
	}
	return o.Scan, true
}

// HasScan returns a boolean if a field has been set.
func (o *CiscatResults) HasScan() bool {
	if o != nil && !IsNil(o.Scan) {
		return true
	}

	return false
}

// SetScan gets a reference to the given ScanIdTime and assigns it to the Scan field.
func (o *CiscatResults) SetScan(v ScanIdTime) {
	o.Scan = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *CiscatResults) GetScore() int32 {
	if o == nil || IsNil(o.Score) {
		var ret int32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiscatResults) GetScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *CiscatResults) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given int32 and assigns it to the Score field.
func (o *CiscatResults) SetScore(v int32) {
	o.Score = &v
}

// GetUnknown returns the Unknown field value if set, zero value otherwise.
func (o *CiscatResults) GetUnknown() int32 {
	if o == nil || IsNil(o.Unknown) {
		var ret int32
		return ret
	}
	return *o.Unknown
}

// GetUnknownOk returns a tuple with the Unknown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiscatResults) GetUnknownOk() (*int32, bool) {
	if o == nil || IsNil(o.Unknown) {
		return nil, false
	}
	return o.Unknown, true
}

// HasUnknown returns a boolean if a field has been set.
func (o *CiscatResults) HasUnknown() bool {
	if o != nil && !IsNil(o.Unknown) {
		return true
	}

	return false
}

// SetUnknown gets a reference to the given int32 and assigns it to the Unknown field.
func (o *CiscatResults) SetUnknown(v int32) {
	o.Unknown = &v
}

func (o CiscatResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CiscatResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Benchmark) {
		toSerialize["benchmark"] = o.Benchmark
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Fail) {
		toSerialize["fail"] = o.Fail
	}
	if !IsNil(o.Notchecked) {
		toSerialize["notchecked"] = o.Notchecked
	}
	if !IsNil(o.Pass) {
		toSerialize["pass"] = o.Pass
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.Scan) {
		toSerialize["scan"] = o.Scan
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !IsNil(o.Unknown) {
		toSerialize["unknown"] = o.Unknown
	}
	return toSerialize, nil
}

type NullableCiscatResults struct {
	value *CiscatResults
	isSet bool
}

func (v NullableCiscatResults) Get() *CiscatResults {
	return v.value
}

func (v *NullableCiscatResults) Set(val *CiscatResults) {
	v.value = val
	v.isSet = true
}

func (v NullableCiscatResults) IsSet() bool {
	return v.isSet
}

func (v *NullableCiscatResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiscatResults(val *CiscatResults) *NullableCiscatResults {
	return &NullableCiscatResults{value: val, isSet: true}
}

func (v NullableCiscatResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiscatResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


