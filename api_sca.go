/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// SCAAPIService SCAAPI service
type SCAAPIService service

type ApiApiControllersScaControllerGetScaAgentRequest struct {
	ctx context.Context
	ApiService *SCAAPIService
	agentId string
	pretty *bool
	waitForComplete *bool
	name *string
	description *string
	references *string
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	q *string
	distinct *bool
}

// Show results in human-readable format
func (r ApiApiControllersScaControllerGetScaAgentRequest) Pretty(pretty bool) ApiApiControllersScaControllerGetScaAgentRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersScaControllerGetScaAgentRequest) WaitForComplete(waitForComplete bool) ApiApiControllersScaControllerGetScaAgentRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// Filter by policy name
func (r ApiApiControllersScaControllerGetScaAgentRequest) Name(name string) ApiApiControllersScaControllerGetScaAgentRequest {
	r.name = &name
	return r
}

// Filter by policy description
func (r ApiApiControllersScaControllerGetScaAgentRequest) Description(description string) ApiApiControllersScaControllerGetScaAgentRequest {
	r.description = &description
	return r
}

// Filter by references
func (r ApiApiControllersScaControllerGetScaAgentRequest) References(references string) ApiApiControllersScaControllerGetScaAgentRequest {
	r.references = &references
	return r
}

// First element to return in the collection
func (r ApiApiControllersScaControllerGetScaAgentRequest) Offset(offset int32) ApiApiControllersScaControllerGetScaAgentRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersScaControllerGetScaAgentRequest) Limit(limit int32) ApiApiControllersScaControllerGetScaAgentRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersScaControllerGetScaAgentRequest) Sort(sort string) ApiApiControllersScaControllerGetScaAgentRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersScaControllerGetScaAgentRequest) Search(search string) ApiApiControllersScaControllerGetScaAgentRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersScaControllerGetScaAgentRequest) Select_(select_ []string) ApiApiControllersScaControllerGetScaAgentRequest {
	r.select_ = &select_
	return r
}

// Query to filter results by. For example q&#x3D;&amp;quot;status&#x3D;active&amp;quot;
func (r ApiApiControllersScaControllerGetScaAgentRequest) Q(q string) ApiApiControllersScaControllerGetScaAgentRequest {
	r.q = &q
	return r
}

// Look for distinct values.
func (r ApiApiControllersScaControllerGetScaAgentRequest) Distinct(distinct bool) ApiApiControllersScaControllerGetScaAgentRequest {
	r.distinct = &distinct
	return r
}

func (r ApiApiControllersScaControllerGetScaAgentRequest) Execute() (*ApiControllersScaControllerGetScaAgent200Response, *http.Response, error) {
	return r.ApiService.ApiControllersScaControllerGetScaAgentExecute(r)
}

/*
ApiControllersScaControllerGetScaAgent Get results

Return the security SCA database of an agent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId Agent ID. All possible values from 000 onwards
 @return ApiApiControllersScaControllerGetScaAgentRequest
*/
func (a *SCAAPIService) ApiControllersScaControllerGetScaAgent(ctx context.Context, agentId string) ApiApiControllersScaControllerGetScaAgentRequest {
	return ApiApiControllersScaControllerGetScaAgentRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return ApiControllersScaControllerGetScaAgent200Response
func (a *SCAAPIService) ApiControllersScaControllerGetScaAgentExecute(r ApiApiControllersScaControllerGetScaAgentRequest) (*ApiControllersScaControllerGetScaAgent200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersScaControllerGetScaAgent200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SCAAPIService.ApiControllersScaControllerGetScaAgent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sca/{agent_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.agentId) < 3 {
		return localVarReturnValue, nil, reportError("agentId must have at least 3 elements")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "form", "")
	}
	if r.references != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "references", r.references, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "form", "")
	} else {
		var defaultValue bool = false
		r.distinct = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiControllersScaControllerGetScaChecksRequest struct {
	ctx context.Context
	ApiService *SCAAPIService
	agentId string
	policyId string
	pretty *bool
	waitForComplete *bool
	title *string
	description *string
	rationale *string
	remediation *string
	command *string
	reason *string
	file *string
	process *string
	directory *string
	registry *string
	references *string
	result *string
	condition *string
	offset *int32
	limit *int32
	sort *string
	search *string
	select_ *[]string
	q *string
	distinct *bool
}

// Show results in human-readable format
func (r ApiApiControllersScaControllerGetScaChecksRequest) Pretty(pretty bool) ApiApiControllersScaControllerGetScaChecksRequest {
	r.pretty = &pretty
	return r
}

// Disable timeout response
func (r ApiApiControllersScaControllerGetScaChecksRequest) WaitForComplete(waitForComplete bool) ApiApiControllersScaControllerGetScaChecksRequest {
	r.waitForComplete = &waitForComplete
	return r
}

// Filter by title
func (r ApiApiControllersScaControllerGetScaChecksRequest) Title(title string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.title = &title
	return r
}

// Filter by policy description
func (r ApiApiControllersScaControllerGetScaChecksRequest) Description(description string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.description = &description
	return r
}

// Filter by rationale
func (r ApiApiControllersScaControllerGetScaChecksRequest) Rationale(rationale string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.rationale = &rationale
	return r
}

// Filter by remediation
func (r ApiApiControllersScaControllerGetScaChecksRequest) Remediation(remediation string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.remediation = &remediation
	return r
}

// Filter by command
func (r ApiApiControllersScaControllerGetScaChecksRequest) Command(command string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.command = &command
	return r
}

// Filter by reason
func (r ApiApiControllersScaControllerGetScaChecksRequest) Reason(reason string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.reason = &reason
	return r
}

// Filter by full path
func (r ApiApiControllersScaControllerGetScaChecksRequest) File(file string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.file = &file
	return r
}

// Filter by process name
func (r ApiApiControllersScaControllerGetScaChecksRequest) Process(process string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.process = &process
	return r
}

// Filter by directory
func (r ApiApiControllersScaControllerGetScaChecksRequest) Directory(directory string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.directory = &directory
	return r
}

// Filter by registry
func (r ApiApiControllersScaControllerGetScaChecksRequest) Registry(registry string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.registry = &registry
	return r
}

// Filter by references
func (r ApiApiControllersScaControllerGetScaChecksRequest) References(references string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.references = &references
	return r
}

// Filter by result
func (r ApiApiControllersScaControllerGetScaChecksRequest) Result(result string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.result = &result
	return r
}

// Filter by condition
func (r ApiApiControllersScaControllerGetScaChecksRequest) Condition(condition string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.condition = &condition
	return r
}

// First element to return in the collection
func (r ApiApiControllersScaControllerGetScaChecksRequest) Offset(offset int32) ApiApiControllersScaControllerGetScaChecksRequest {
	r.offset = &offset
	return r
}

// Maximum number of elements to return. Although up to 100.000 can be specified, it is recommended not to exceed 500 elements. Responses may be slower the more this number is exceeded. 
func (r ApiApiControllersScaControllerGetScaChecksRequest) Limit(limit int32) ApiApiControllersScaControllerGetScaChecksRequest {
	r.limit = &limit
	return r
}

// Sort the collection by a field or fields (separated by comma). Use +/- at the beggining to list in ascending or descending order. Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersScaControllerGetScaChecksRequest) Sort(sort string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.sort = &sort
	return r
}

// Look for elements containing the specified string. To obtain a complementary search, use &#39;-&#39; at the beginning
func (r ApiApiControllersScaControllerGetScaChecksRequest) Search(search string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.search = &search
	return r
}

// Select which fields to return (separated by comma). Use &#39;.&#39; for nested fields. For example, &#39;{field1: field2}&#39; may be selected with &#39;field1.field2&#39;
func (r ApiApiControllersScaControllerGetScaChecksRequest) Select_(select_ []string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.select_ = &select_
	return r
}

// Query to filter results by. For example q&#x3D;&amp;quot;status&#x3D;active&amp;quot;
func (r ApiApiControllersScaControllerGetScaChecksRequest) Q(q string) ApiApiControllersScaControllerGetScaChecksRequest {
	r.q = &q
	return r
}

// Look for distinct values.
func (r ApiApiControllersScaControllerGetScaChecksRequest) Distinct(distinct bool) ApiApiControllersScaControllerGetScaChecksRequest {
	r.distinct = &distinct
	return r
}

func (r ApiApiControllersScaControllerGetScaChecksRequest) Execute() (*ApiControllersScaControllerGetScaChecks200Response, *http.Response, error) {
	return r.ApiService.ApiControllersScaControllerGetScaChecksExecute(r)
}

/*
ApiControllersScaControllerGetScaChecks Get policy checks

Return the policy monitoring alerts for a given policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId Agent ID. All possible values from 000 onwards
 @param policyId Filter by policy id
 @return ApiApiControllersScaControllerGetScaChecksRequest
*/
func (a *SCAAPIService) ApiControllersScaControllerGetScaChecks(ctx context.Context, agentId string, policyId string) ApiApiControllersScaControllerGetScaChecksRequest {
	return ApiApiControllersScaControllerGetScaChecksRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
		policyId: policyId,
	}
}

// Execute executes the request
//  @return ApiControllersScaControllerGetScaChecks200Response
func (a *SCAAPIService) ApiControllersScaControllerGetScaChecksExecute(r ApiApiControllersScaControllerGetScaChecksRequest) (*ApiControllersScaControllerGetScaChecks200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiControllersScaControllerGetScaChecks200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SCAAPIService.ApiControllersScaControllerGetScaChecks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sca/{agent_id}/checks/{policy_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policy_id"+"}", url.PathEscape(parameterValueToString(r.policyId, "policyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.agentId) < 3 {
		return localVarReturnValue, nil, reportError("agentId must have at least 3 elements")
	}

	if r.pretty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pretty", r.pretty, "form", "")
	} else {
		var defaultValue bool = false
		r.pretty = &defaultValue
	}
	if r.waitForComplete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wait_for_complete", r.waitForComplete, "form", "")
	} else {
		var defaultValue bool = false
		r.waitForComplete = &defaultValue
	}
	if r.title != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "title", r.title, "form", "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "form", "")
	}
	if r.rationale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rationale", r.rationale, "form", "")
	}
	if r.remediation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "remediation", r.remediation, "form", "")
	}
	if r.command != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "command", r.command, "form", "")
	}
	if r.reason != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reason", r.reason, "form", "")
	}
	if r.file != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file", r.file, "form", "")
	}
	if r.process != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "process", r.process, "form", "")
	}
	if r.directory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "directory", r.directory, "form", "")
	}
	if r.registry != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "registry", r.registry, "form", "")
	}
	if r.references != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "references", r.references, "form", "")
	}
	if r.result != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "result", r.result, "form", "")
	}
	if r.condition != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "condition", r.condition, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 500
		r.limit = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.select_ != nil {
		t := *r.select_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "select", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "select", t, "form", "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	}
	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "form", "")
	} else {
		var defaultValue bool = false
		r.distinct = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
