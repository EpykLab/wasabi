/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the Rule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rule{}

// Rule struct for Rule
type Rule struct {
	// Name of the file
	Filename *string `json:"filename,omitempty"`
	// Folder path where the file is located. This path is relative to the Wazuh installation path
	RelativeDirname *string `json:"relative_dirname,omitempty"`
	// Whether the specified ruleset file is enabled or disabled in Wazuh manager configuration
	Status *string `json:"status,omitempty"`
	// Rule description. This description is shown when an alert matching the rule is raised
	Description *string `json:"description,omitempty"`
	// Rule definition details
	Details map[string]interface{} `json:"details,omitempty"`
	// GDPR checks the rule is checking
	Gdpr []string `json:"gdpr,omitempty"`
	// GPG13 checks the rule is checking
	Gpg13 []string `json:"gpg13,omitempty"`
	// Groups the rule belongs to
	Groups []string `json:"groups,omitempty"`
	// HIPAA checks the rule is checking
	Hipaa []string `json:"hipaa,omitempty"`
	// Rule ID
	Id *int32 `json:"id,omitempty"`
	// Rule level
	Level *int32 `json:"level,omitempty"`
	// NIST-800-53 checks the rule is checking
	Nist80053 []string `json:"nist-800-53,omitempty"`
	// TSC checks the rule is checking
	Tsc []string `json:"tsc,omitempty"`
	// PCI DSS checks the rule is checking
	Pci []string `json:"pci,omitempty"`
}

// NewRule instantiates a new Rule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRule() *Rule {
	this := Rule{}
	return &this
}

// NewRuleWithDefaults instantiates a new Rule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleWithDefaults() *Rule {
	this := Rule{}
	return &this
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *Rule) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *Rule) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *Rule) SetFilename(v string) {
	o.Filename = &v
}

// GetRelativeDirname returns the RelativeDirname field value if set, zero value otherwise.
func (o *Rule) GetRelativeDirname() string {
	if o == nil || IsNil(o.RelativeDirname) {
		var ret string
		return ret
	}
	return *o.RelativeDirname
}

// GetRelativeDirnameOk returns a tuple with the RelativeDirname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetRelativeDirnameOk() (*string, bool) {
	if o == nil || IsNil(o.RelativeDirname) {
		return nil, false
	}
	return o.RelativeDirname, true
}

// HasRelativeDirname returns a boolean if a field has been set.
func (o *Rule) HasRelativeDirname() bool {
	if o != nil && !IsNil(o.RelativeDirname) {
		return true
	}

	return false
}

// SetRelativeDirname gets a reference to the given string and assigns it to the RelativeDirname field.
func (o *Rule) SetRelativeDirname(v string) {
	o.RelativeDirname = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Rule) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Rule) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Rule) SetStatus(v string) {
	o.Status = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Rule) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Rule) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Rule) SetDescription(v string) {
	o.Description = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Rule) GetDetails() map[string]interface{} {
	if o == nil || IsNil(o.Details) {
		var ret map[string]interface{}
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetDetailsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Details) {
		return map[string]interface{}{}, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Rule) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given map[string]interface{} and assigns it to the Details field.
func (o *Rule) SetDetails(v map[string]interface{}) {
	o.Details = v
}

// GetGdpr returns the Gdpr field value if set, zero value otherwise.
func (o *Rule) GetGdpr() []string {
	if o == nil || IsNil(o.Gdpr) {
		var ret []string
		return ret
	}
	return o.Gdpr
}

// GetGdprOk returns a tuple with the Gdpr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetGdprOk() ([]string, bool) {
	if o == nil || IsNil(o.Gdpr) {
		return nil, false
	}
	return o.Gdpr, true
}

// HasGdpr returns a boolean if a field has been set.
func (o *Rule) HasGdpr() bool {
	if o != nil && !IsNil(o.Gdpr) {
		return true
	}

	return false
}

// SetGdpr gets a reference to the given []string and assigns it to the Gdpr field.
func (o *Rule) SetGdpr(v []string) {
	o.Gdpr = v
}

// GetGpg13 returns the Gpg13 field value if set, zero value otherwise.
func (o *Rule) GetGpg13() []string {
	if o == nil || IsNil(o.Gpg13) {
		var ret []string
		return ret
	}
	return o.Gpg13
}

// GetGpg13Ok returns a tuple with the Gpg13 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetGpg13Ok() ([]string, bool) {
	if o == nil || IsNil(o.Gpg13) {
		return nil, false
	}
	return o.Gpg13, true
}

// HasGpg13 returns a boolean if a field has been set.
func (o *Rule) HasGpg13() bool {
	if o != nil && !IsNil(o.Gpg13) {
		return true
	}

	return false
}

// SetGpg13 gets a reference to the given []string and assigns it to the Gpg13 field.
func (o *Rule) SetGpg13(v []string) {
	o.Gpg13 = v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *Rule) GetGroups() []string {
	if o == nil || IsNil(o.Groups) {
		var ret []string
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *Rule) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []string and assigns it to the Groups field.
func (o *Rule) SetGroups(v []string) {
	o.Groups = v
}

// GetHipaa returns the Hipaa field value if set, zero value otherwise.
func (o *Rule) GetHipaa() []string {
	if o == nil || IsNil(o.Hipaa) {
		var ret []string
		return ret
	}
	return o.Hipaa
}

// GetHipaaOk returns a tuple with the Hipaa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetHipaaOk() ([]string, bool) {
	if o == nil || IsNil(o.Hipaa) {
		return nil, false
	}
	return o.Hipaa, true
}

// HasHipaa returns a boolean if a field has been set.
func (o *Rule) HasHipaa() bool {
	if o != nil && !IsNil(o.Hipaa) {
		return true
	}

	return false
}

// SetHipaa gets a reference to the given []string and assigns it to the Hipaa field.
func (o *Rule) SetHipaa(v []string) {
	o.Hipaa = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Rule) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Rule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Rule) SetId(v int32) {
	o.Id = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *Rule) GetLevel() int32 {
	if o == nil || IsNil(o.Level) {
		var ret int32
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *Rule) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given int32 and assigns it to the Level field.
func (o *Rule) SetLevel(v int32) {
	o.Level = &v
}

// GetNist80053 returns the Nist80053 field value if set, zero value otherwise.
func (o *Rule) GetNist80053() []string {
	if o == nil || IsNil(o.Nist80053) {
		var ret []string
		return ret
	}
	return o.Nist80053
}

// GetNist80053Ok returns a tuple with the Nist80053 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetNist80053Ok() ([]string, bool) {
	if o == nil || IsNil(o.Nist80053) {
		return nil, false
	}
	return o.Nist80053, true
}

// HasNist80053 returns a boolean if a field has been set.
func (o *Rule) HasNist80053() bool {
	if o != nil && !IsNil(o.Nist80053) {
		return true
	}

	return false
}

// SetNist80053 gets a reference to the given []string and assigns it to the Nist80053 field.
func (o *Rule) SetNist80053(v []string) {
	o.Nist80053 = v
}

// GetTsc returns the Tsc field value if set, zero value otherwise.
func (o *Rule) GetTsc() []string {
	if o == nil || IsNil(o.Tsc) {
		var ret []string
		return ret
	}
	return o.Tsc
}

// GetTscOk returns a tuple with the Tsc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetTscOk() ([]string, bool) {
	if o == nil || IsNil(o.Tsc) {
		return nil, false
	}
	return o.Tsc, true
}

// HasTsc returns a boolean if a field has been set.
func (o *Rule) HasTsc() bool {
	if o != nil && !IsNil(o.Tsc) {
		return true
	}

	return false
}

// SetTsc gets a reference to the given []string and assigns it to the Tsc field.
func (o *Rule) SetTsc(v []string) {
	o.Tsc = v
}

// GetPci returns the Pci field value if set, zero value otherwise.
func (o *Rule) GetPci() []string {
	if o == nil || IsNil(o.Pci) {
		var ret []string
		return ret
	}
	return o.Pci
}

// GetPciOk returns a tuple with the Pci field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetPciOk() ([]string, bool) {
	if o == nil || IsNil(o.Pci) {
		return nil, false
	}
	return o.Pci, true
}

// HasPci returns a boolean if a field has been set.
func (o *Rule) HasPci() bool {
	if o != nil && !IsNil(o.Pci) {
		return true
	}

	return false
}

// SetPci gets a reference to the given []string and assigns it to the Pci field.
func (o *Rule) SetPci(v []string) {
	o.Pci = v
}

func (o Rule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.RelativeDirname) {
		toSerialize["relative_dirname"] = o.RelativeDirname
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Gdpr) {
		toSerialize["gdpr"] = o.Gdpr
	}
	if !IsNil(o.Gpg13) {
		toSerialize["gpg13"] = o.Gpg13
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.Hipaa) {
		toSerialize["hipaa"] = o.Hipaa
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.Nist80053) {
		toSerialize["nist-800-53"] = o.Nist80053
	}
	if !IsNil(o.Tsc) {
		toSerialize["tsc"] = o.Tsc
	}
	if !IsNil(o.Pci) {
		toSerialize["pci"] = o.Pci
	}
	return toSerialize, nil
}

type NullableRule struct {
	value *Rule
	isSet bool
}

func (v NullableRule) Get() *Rule {
	return v.value
}

func (v *NullableRule) Set(val *Rule) {
	v.value = val
	v.isSet = true
}

func (v NullableRule) IsSet() bool {
	return v.isSet
}

func (v *NullableRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRule(val *Rule) *NullableRule {
	return &NullableRule{value: val, isSet: true}
}

func (v NullableRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


