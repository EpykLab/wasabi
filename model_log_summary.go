/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the LogSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogSummary{}

// LogSummary struct for LogSummary
type LogSummary struct {
	All *int32 `json:"all,omitempty"`
	Critical *int32 `json:"critical,omitempty"`
	Debug *int32 `json:"debug,omitempty"`
	Error *int32 `json:"error,omitempty"`
	Info *int32 `json:"info,omitempty"`
	Warning *int32 `json:"warning,omitempty"`
}

// NewLogSummary instantiates a new LogSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogSummary() *LogSummary {
	this := LogSummary{}
	return &this
}

// NewLogSummaryWithDefaults instantiates a new LogSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogSummaryWithDefaults() *LogSummary {
	this := LogSummary{}
	return &this
}

// GetAll returns the All field value if set, zero value otherwise.
func (o *LogSummary) GetAll() int32 {
	if o == nil || IsNil(o.All) {
		var ret int32
		return ret
	}
	return *o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSummary) GetAllOk() (*int32, bool) {
	if o == nil || IsNil(o.All) {
		return nil, false
	}
	return o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *LogSummary) HasAll() bool {
	if o != nil && !IsNil(o.All) {
		return true
	}

	return false
}

// SetAll gets a reference to the given int32 and assigns it to the All field.
func (o *LogSummary) SetAll(v int32) {
	o.All = &v
}

// GetCritical returns the Critical field value if set, zero value otherwise.
func (o *LogSummary) GetCritical() int32 {
	if o == nil || IsNil(o.Critical) {
		var ret int32
		return ret
	}
	return *o.Critical
}

// GetCriticalOk returns a tuple with the Critical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSummary) GetCriticalOk() (*int32, bool) {
	if o == nil || IsNil(o.Critical) {
		return nil, false
	}
	return o.Critical, true
}

// HasCritical returns a boolean if a field has been set.
func (o *LogSummary) HasCritical() bool {
	if o != nil && !IsNil(o.Critical) {
		return true
	}

	return false
}

// SetCritical gets a reference to the given int32 and assigns it to the Critical field.
func (o *LogSummary) SetCritical(v int32) {
	o.Critical = &v
}

// GetDebug returns the Debug field value if set, zero value otherwise.
func (o *LogSummary) GetDebug() int32 {
	if o == nil || IsNil(o.Debug) {
		var ret int32
		return ret
	}
	return *o.Debug
}

// GetDebugOk returns a tuple with the Debug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSummary) GetDebugOk() (*int32, bool) {
	if o == nil || IsNil(o.Debug) {
		return nil, false
	}
	return o.Debug, true
}

// HasDebug returns a boolean if a field has been set.
func (o *LogSummary) HasDebug() bool {
	if o != nil && !IsNil(o.Debug) {
		return true
	}

	return false
}

// SetDebug gets a reference to the given int32 and assigns it to the Debug field.
func (o *LogSummary) SetDebug(v int32) {
	o.Debug = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *LogSummary) GetError() int32 {
	if o == nil || IsNil(o.Error) {
		var ret int32
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSummary) GetErrorOk() (*int32, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *LogSummary) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given int32 and assigns it to the Error field.
func (o *LogSummary) SetError(v int32) {
	o.Error = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *LogSummary) GetInfo() int32 {
	if o == nil || IsNil(o.Info) {
		var ret int32
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSummary) GetInfoOk() (*int32, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *LogSummary) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given int32 and assigns it to the Info field.
func (o *LogSummary) SetInfo(v int32) {
	o.Info = &v
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *LogSummary) GetWarning() int32 {
	if o == nil || IsNil(o.Warning) {
		var ret int32
		return ret
	}
	return *o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSummary) GetWarningOk() (*int32, bool) {
	if o == nil || IsNil(o.Warning) {
		return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *LogSummary) HasWarning() bool {
	if o != nil && !IsNil(o.Warning) {
		return true
	}

	return false
}

// SetWarning gets a reference to the given int32 and assigns it to the Warning field.
func (o *LogSummary) SetWarning(v int32) {
	o.Warning = &v
}

func (o LogSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.All) {
		toSerialize["all"] = o.All
	}
	if !IsNil(o.Critical) {
		toSerialize["critical"] = o.Critical
	}
	if !IsNil(o.Debug) {
		toSerialize["debug"] = o.Debug
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	if !IsNil(o.Warning) {
		toSerialize["warning"] = o.Warning
	}
	return toSerialize, nil
}

type NullableLogSummary struct {
	value *LogSummary
	isSet bool
}

func (v NullableLogSummary) Get() *LogSummary {
	return v.value
}

func (v *NullableLogSummary) Set(val *LogSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableLogSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableLogSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogSummary(val *LogSummary) *NullableLogSummary {
	return &NullableLogSummary{value: val, isSet: true}
}

func (v NullableLogSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


