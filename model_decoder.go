/*
Wazuh API REST

The Wazuh API is an open-source RESTful API that allows for interaction with the Wazuh manager from a web browser, command line tools like cURL or any script or program that can make web requests. The Wazuh WUI relies on this heavily and Wazuhâ€™s goal is to accommodate complete remote management of the Wazuh infrastructure via the Wazuh WUI. Use the Wazuh API to easily perform everyday actions like adding an agent, restarting the manager(s) or agent(s) or looking up syscheck details.  # Authentication  Wazuh API endpoints require authentication to be used. Therefore, all calls must include a JSON Web Token. JWT is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Perform a call with `basicAuth` to `POST /security/user/authenticate` and obtain a JWT token to run any endpoint.  JWT tokens have a default duration of 900 seconds. To change this value, you must perform a call with a valid JWT token to `PUT /security/config`. After this change, you will need to get a new JWT token as all previously issued tokens are revoked when any change is performed on security configuration.  Login with USER and PASSWORD:  `curl -u <USER>:<PASSWORD> -k -X POST \"https://<HOST_IP>:55000/security/user/authenticate\"` ```json {     \"data\": {         \"token\": \"<YOUR_JWT_TOKEN>\"     },     \"error\": 0 } ``` Use the token from the previous response to perform any endpoint request:  `curl -k -X <METHOD> \"https://<HOST_IP>:55000/<ENDPOINT>\" -H  \"Authorization: Bearer <YOUR_JWT_TOKEN>\"`  Change the token base duration:  `curl -k -X PUT \"https://<HOST_IP>:55000/security/config\" -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" -d '{\"auth_token_exp_timeout\": <NEW_EXPIRE_TIME_IN_SECONDS>}'`  <SecurityDefinitions /> 

API version: 4.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the Decoder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Decoder{}

// Decoder struct for Decoder
type Decoder struct {
	// Decoder name
	Name *string `json:"name,omitempty"`
	// Position of this decoder in the decoder file. The parent decoder will have position 0, the following defined decoder will have position 1, and so on
	Position *int32 `json:"position,omitempty"`
	// Decoder definition fields
	Details *map[string]interface{} `json:"details,omitempty"`
	// Name of the file
	Filename *string `json:"filename,omitempty"`
	// Folder path where the file is located. This path is relative to the Wazuh installation path
	RelativeDirname *string `json:"relative_dirname,omitempty"`
	// Whether the specified ruleset file is enabled or disabled in Wazuh manager configuration
	Status *string `json:"status,omitempty"`
}

// NewDecoder instantiates a new Decoder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecoder() *Decoder {
	this := Decoder{}
	return &this
}

// NewDecoderWithDefaults instantiates a new Decoder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecoderWithDefaults() *Decoder {
	this := Decoder{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Decoder) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Decoder) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Decoder) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Decoder) SetName(v string) {
	o.Name = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *Decoder) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Decoder) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *Decoder) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *Decoder) SetPosition(v int32) {
	o.Position = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Decoder) GetDetails() map[string]interface{} {
	if o == nil || IsNil(o.Details) {
		var ret map[string]interface{}
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Decoder) GetDetailsOk() (*map[string]interface{}, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Decoder) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given map[string]interface{} and assigns it to the Details field.
func (o *Decoder) SetDetails(v map[string]interface{}) {
	o.Details = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *Decoder) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Decoder) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *Decoder) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *Decoder) SetFilename(v string) {
	o.Filename = &v
}

// GetRelativeDirname returns the RelativeDirname field value if set, zero value otherwise.
func (o *Decoder) GetRelativeDirname() string {
	if o == nil || IsNil(o.RelativeDirname) {
		var ret string
		return ret
	}
	return *o.RelativeDirname
}

// GetRelativeDirnameOk returns a tuple with the RelativeDirname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Decoder) GetRelativeDirnameOk() (*string, bool) {
	if o == nil || IsNil(o.RelativeDirname) {
		return nil, false
	}
	return o.RelativeDirname, true
}

// HasRelativeDirname returns a boolean if a field has been set.
func (o *Decoder) HasRelativeDirname() bool {
	if o != nil && !IsNil(o.RelativeDirname) {
		return true
	}

	return false
}

// SetRelativeDirname gets a reference to the given string and assigns it to the RelativeDirname field.
func (o *Decoder) SetRelativeDirname(v string) {
	o.RelativeDirname = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Decoder) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Decoder) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Decoder) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Decoder) SetStatus(v string) {
	o.Status = &v
}

func (o Decoder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Decoder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.RelativeDirname) {
		toSerialize["relative_dirname"] = o.RelativeDirname
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableDecoder struct {
	value *Decoder
	isSet bool
}

func (v NullableDecoder) Get() *Decoder {
	return v.value
}

func (v *NullableDecoder) Set(val *Decoder) {
	v.value = val
	v.isSet = true
}

func (v NullableDecoder) IsSet() bool {
	return v.isSet
}

func (v *NullableDecoder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecoder(val *Decoder) *NullableDecoder {
	return &NullableDecoder{value: val, isSet: true}
}

func (v NullableDecoder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecoder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


